{
  "data": {
    "edges": [
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "URL",
            "id": "URL-xMkct",
            "name": "component_as_tool",
            "output_types": [
              "Tool"
            ]
          },
          "targetHandle": {
            "fieldName": "tools",
            "id": "Agent-7oLa6",
            "inputTypes": [
              "Tool"
            ],
            "type": "other"
          }
        },
        "id": "xy-edge__URL-xMkct{œdataTypeœ:œURLœ,œidœ:œURL-xMkctœ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}-Agent-7oLa6{œfieldNameœ:œtoolsœ,œidœ:œAgent-7oLa6œ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "URL-xMkct",
        "sourceHandle": "{œdataTypeœ:œURLœ,œidœ:œURL-xMkctœ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}",
        "target": "Agent-7oLa6",
        "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œAgent-7oLa6œ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "ChatInput",
            "id": "ChatInput-J8CSX",
            "name": "message",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "input_value",
            "id": "Agent-7oLa6",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "xy-edge__ChatInput-J8CSX{œdataTypeœ:œChatInputœ,œidœ:œChatInput-J8CSXœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-Agent-7oLa6{œfieldNameœ:œinput_valueœ,œidœ:œAgent-7oLa6œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "ChatInput-J8CSX",
        "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-J8CSXœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Agent-7oLa6",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œAgent-7oLa6œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "Agent",
            "id": "Agent-7oLa6",
            "name": "response",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "input_value",
            "id": "ChatOutput-u2fHd",
            "inputTypes": [
              "Data",
              "DataFrame",
              "Message"
            ],
            "type": "other"
          }
        },
        "id": "xy-edge__Agent-7oLa6{œdataTypeœ:œAgentœ,œidœ:œAgent-7oLa6œ,œnameœ:œresponseœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-u2fHd{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-u2fHdœ,œinputTypesœ:[œDataœ,œDataFrameœ,œMessageœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "Agent-7oLa6",
        "sourceHandle": "{œdataTypeœ:œAgentœ,œidœ:œAgent-7oLa6œ,œnameœ:œresponseœ,œoutput_typesœ:[œMessageœ]}",
        "target": "ChatOutput-u2fHd",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-u2fHdœ,œinputTypesœ:[œDataœ,œDataFrameœ,œMessageœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "CalculatorComponent",
            "id": "CalculatorComponent-wYV8J",
            "name": "component_as_tool",
            "output_types": [
              "Tool"
            ]
          },
          "targetHandle": {
            "fieldName": "tools",
            "id": "Agent-7oLa6",
            "inputTypes": [
              "Tool"
            ],
            "type": "other"
          }
        },
        "id": "xy-edge__CalculatorComponent-wYV8J{œdataTypeœ:œCalculatorComponentœ,œidœ:œCalculatorComponent-wYV8Jœ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}-Agent-7oLa6{œfieldNameœ:œtoolsœ,œidœ:œAgent-7oLa6œ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "CalculatorComponent-wYV8J",
        "sourceHandle": "{œdataTypeœ:œCalculatorComponentœ,œidœ:œCalculatorComponent-wYV8Jœ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}",
        "target": "Agent-7oLa6",
        "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œAgent-7oLa6œ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "OpenAIModel",
            "id": "OpenAIModel-REaI9",
            "name": "model_output",
            "output_types": [
              "LanguageModel"
            ]
          },
          "targetHandle": {
            "fieldName": "agent_llm",
            "id": "Agent-7oLa6",
            "inputTypes": [
              "LanguageModel"
            ],
            "type": "str"
          }
        },
        "id": "xy-edge__OpenAIModel-REaI9{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-REaI9œ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}-Agent-7oLa6{œfieldNameœ:œagent_llmœ,œidœ:œAgent-7oLa6œ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "OpenAIModel-REaI9",
        "sourceHandle": "{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-REaI9œ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}",
        "target": "Agent-7oLa6",
        "targetHandle": "{œfieldNameœ:œagent_llmœ,œidœ:œAgent-7oLa6œ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "CurrentDate",
            "id": "CurrentDate-FXcJ7",
            "name": "component_as_tool",
            "output_types": [
              "Tool"
            ]
          },
          "targetHandle": {
            "fieldName": "tools",
            "id": "Agent-7oLa6",
            "inputTypes": [
              "Tool"
            ],
            "type": "other"
          }
        },
        "id": "xy-edge__CurrentDate-FXcJ7{œdataTypeœ:œCurrentDateœ,œidœ:œCurrentDate-FXcJ7œ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}-Agent-7oLa6{œfieldNameœ:œtoolsœ,œidœ:œAgent-7oLa6œ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "CurrentDate-FXcJ7",
        "sourceHandle": "{œdataTypeœ:œCurrentDateœ,œidœ:œCurrentDate-FXcJ7œ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}",
        "target": "Agent-7oLa6",
        "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œAgent-7oLa6œ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "TKNewActivityComponent",
            "id": "CalculatorComponent-cSjHW",
            "name": "component_as_tool",
            "output_types": [
              "Tool"
            ]
          },
          "targetHandle": {
            "fieldName": "tools",
            "id": "Agent-7oLa6",
            "inputTypes": [
              "Tool"
            ],
            "type": "other"
          }
        },
        "id": "xy-edge__CalculatorComponent-cSjHW{œdataTypeœ:œTKNewActivityComponentœ,œidœ:œCalculatorComponent-cSjHWœ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}-Agent-7oLa6{œfieldNameœ:œtoolsœ,œidœ:œAgent-7oLa6œ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "CalculatorComponent-cSjHW",
        "sourceHandle": "{œdataTypeœ:œTKNewActivityComponentœ,œidœ:œCalculatorComponent-cSjHWœ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}",
        "target": "Agent-7oLa6",
        "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œAgent-7oLa6œ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "TKOldActivityComponent",
            "id": "TKNewActivityComponent-9apOk",
            "name": "component_as_tool",
            "output_types": [
              "Tool"
            ]
          },
          "targetHandle": {
            "fieldName": "tools",
            "id": "Agent-7oLa6",
            "inputTypes": [
              "Tool"
            ],
            "type": "other"
          }
        },
        "id": "xy-edge__TKNewActivityComponent-9apOk{œdataTypeœ:œTKOldActivityComponentœ,œidœ:œTKNewActivityComponent-9apOkœ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}-Agent-7oLa6{œfieldNameœ:œtoolsœ,œidœ:œAgent-7oLa6œ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "TKNewActivityComponent-9apOk",
        "sourceHandle": "{œdataTypeœ:œTKOldActivityComponentœ,œidœ:œTKNewActivityComponent-9apOkœ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}",
        "target": "Agent-7oLa6",
        "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œAgent-7oLa6œ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}"
      }
    ],
    "nodes": [
      {
        "data": {
          "description": "Load and retrieve data from specified URLs. Supports output in plain text, raw HTML, or JSON, with options for cleaning and separating multiple outputs.",
          "display_name": "URL",
          "id": "URL-xMkct",
          "node": {
            "base_classes": [
              "Data",
              "DataFrame",
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Load and retrieve data from specified URLs. Supports output in plain text, raw HTML, or JSON, with options for cleaning and separating multiple outputs.",
            "display_name": "URL",
            "documentation": "",
            "edited": false,
            "field_order": [
              "urls",
              "format",
              "separator",
              "clean_extra_whitespace"
            ],
            "frozen": false,
            "icon": "layout-template",
            "last_updated": "2025-07-22T05:02:32.988Z",
            "legacy": false,
            "lf_version": "1.5.0.post1",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Toolset",
                "group_outputs": false,
                "hidden": false,
                "method": "to_toolkit",
                "name": "component_as_tool",
                "options": null,
                "required_inputs": null,
                "selected": "Tool",
                "tool_mode": true,
                "types": [
                  "Tool"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "clean_extra_whitespace": {
                "_input_type": "BoolInput",
                "advanced": false,
                "display_name": "Clean Extra Whitespace",
                "dynamic": false,
                "info": "Whether to clean excessive blank lines in the text output. Only applies to 'Text' format.",
                "list": false,
                "list_add_label": "Add More",
                "name": "clean_extra_whitespace",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "import asyncio\nimport json\nimport re\n\nimport aiohttp\nfrom langchain_community.document_loaders import AsyncHtmlLoader, WebBaseLoader\n\nfrom langflow.custom import Component\nfrom langflow.io import BoolInput, DropdownInput, MessageTextInput, Output, StrInput\nfrom langflow.schema import Data\nfrom langflow.schema.dataframe import DataFrame\nfrom langflow.schema.message import Message\n\n\nclass URLComponent(Component):\n    display_name = \"URL\"\n    description = (\n        \"Load and retrieve data from specified URLs. Supports output in plain text, raw HTML, \"\n        \"or JSON, with options for cleaning and separating multiple outputs.\"\n    )\n    icon = \"layout-template\"\n    name = \"URL\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"urls\",\n            display_name=\"URLs\",\n            is_list=True,\n            tool_mode=True,\n            placeholder=\"Enter a URL...\",\n            list_add_label=\"Add URL\",\n        ),\n        DropdownInput(\n            name=\"format\",\n            display_name=\"Output Format\",\n            info=(\n                \"Output Format. Use 'Text' to extract text from the HTML, 'Raw HTML' for the raw HTML \"\n                \"content, or 'JSON' to extract JSON from the HTML.\"\n            ),\n            options=[\"Text\", \"Raw HTML\", \"JSON\"],\n            value=\"Text\",\n            real_time_refresh=True,\n        ),\n        StrInput(\n            name=\"separator\",\n            display_name=\"Separator\",\n            value=\"\\n\\n\",\n            show=True,\n            info=(\n                \"Specify the separator to use between multiple outputs. Default for Text is '\\\\n\\\\n'. \"\n                \"Default for Raw HTML is '\\\\n<!-- Separator -->\\\\n'.\"\n            ),\n        ),\n        BoolInput(\n            name=\"clean_extra_whitespace\",\n            display_name=\"Clean Extra Whitespace\",\n            value=True,\n            show=True,\n            info=\"Whether to clean excessive blank lines in the text output. Only applies to 'Text' format.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data\", method=\"fetch_content\"),\n        Output(display_name=\"Text\", name=\"text\", method=\"fetch_content_text\"),\n        Output(display_name=\"DataFrame\", name=\"dataframe\", method=\"as_dataframe\"),\n    ]\n\n    async def validate_json_content(self, url: str) -> bool:\n        \"\"\"Validates if the URL content is actually JSON.\"\"\"\n        try:\n            async with aiohttp.ClientSession() as session, session.get(url) as response:\n                http_ok = 200\n                if response.status != http_ok:\n                    return False\n\n                content = await response.text()\n                try:\n                    json.loads(content)\n                except json.JSONDecodeError:\n                    return False\n                else:\n                    return True\n        except (aiohttp.ClientError, asyncio.TimeoutError):\n            # Log specific error for debugging if needed\n            return False\n\n    def update_build_config(self, build_config: dict, field_value: str, field_name: str | None = None) -> dict:\n        \"\"\"Dynamically update fields based on selected format.\"\"\"\n        if field_name == \"format\":\n            is_text_mode = field_value == \"Text\"\n            is_json_mode = field_value == \"JSON\"\n            build_config[\"separator\"][\"value\"] = \"\\n\\n\" if is_text_mode else \"\\n<!-- Separator -->\\n\"\n            build_config[\"clean_extra_whitespace\"][\"show\"] = is_text_mode\n            build_config[\"separator\"][\"show\"] = not is_json_mode\n        return build_config\n\n    def ensure_url(self, string: str) -> str:\n        \"\"\"Ensures the given string is a valid URL.\"\"\"\n        if not string.startswith((\"http://\", \"https://\")):\n            string = \"http://\" + string\n\n        url_regex = re.compile(\n            r\"^(https?:\\/\\/)?\"\n            r\"(www\\.)?\"\n            r\"([a-zA-Z0-9.-]+)\"\n            r\"(\\.[a-zA-Z]{2,})?\"\n            r\"(:\\d+)?\"\n            r\"(\\/[^\\s]*)?$\",\n            re.IGNORECASE,\n        )\n\n        error_msg = \"Invalid URL - \" + string\n        if not url_regex.match(string):\n            raise ValueError(error_msg)\n\n        return string\n\n    def fetch_content(self) -> list[Data]:\n        \"\"\"Fetch content based on selected format.\"\"\"\n        urls = list({self.ensure_url(url.strip()) for url in self.urls if url.strip()})\n\n        no_urls_msg = \"No valid URLs provided.\"\n        if not urls:\n            raise ValueError(no_urls_msg)\n\n        # If JSON format is selected, validate JSON content first\n        if self.format == \"JSON\":\n            for url in urls:\n                is_json = asyncio.run(self.validate_json_content(url))\n                if not is_json:\n                    error_msg = \"Invalid JSON content from URL - \" + url\n                    raise ValueError(error_msg)\n\n        if self.format == \"Raw HTML\":\n            loader = AsyncHtmlLoader(web_path=urls, encoding=\"utf-8\")\n        else:\n            loader = WebBaseLoader(web_paths=urls, encoding=\"utf-8\")\n\n        docs = loader.load()\n\n        if self.format == \"JSON\":\n            data = []\n            for doc in docs:\n                try:\n                    json_content = json.loads(doc.page_content)\n                    data_dict = {\"text\": json.dumps(json_content, indent=2), **json_content, **doc.metadata}\n                    data.append(Data(**data_dict))\n                except json.JSONDecodeError as err:\n                    source = doc.metadata.get(\"source\", \"unknown URL\")\n                    error_msg = \"Invalid JSON content from \" + source\n                    raise ValueError(error_msg) from err\n            return data\n\n        return [Data(text=doc.page_content, **doc.metadata) for doc in docs]\n\n    def fetch_content_text(self) -> Message:\n        \"\"\"Fetch content and return as formatted text.\"\"\"\n        data = self.fetch_content()\n\n        if self.format == \"JSON\":\n            text_list = [item.text for item in data]\n            result = \"\\n\".join(text_list)\n        else:\n            text_list = [item.text for item in data]\n            if self.format == \"Text\" and self.clean_extra_whitespace:\n                text_list = [re.sub(r\"\\n{3,}\", \"\\n\\n\", text) for text in text_list]\n            result = self.separator.join(text_list)\n\n        self.status = result\n        return Message(text=result)\n\n    def as_dataframe(self) -> DataFrame:\n        \"\"\"Return fetched content as a DataFrame.\"\"\"\n        return DataFrame(self.fetch_content())\n"
              },
              "format": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Output Format",
                "dynamic": false,
                "info": "Output Format. Use 'Text' to extract text from the HTML, 'Raw HTML' for the raw HTML content, or 'JSON' to extract JSON from the HTML.",
                "name": "format",
                "options": [
                  "Text",
                  "Raw HTML",
                  "JSON"
                ],
                "options_metadata": [],
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Text"
              },
              "separator": {
                "_input_type": "StrInput",
                "advanced": false,
                "display_name": "Separator",
                "dynamic": false,
                "info": "Specify the separator to use between multiple outputs. Default for Text is '\\n\\n'. Default for Raw HTML is '\\n<!-- Separator -->\\n'.",
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "separator",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "\n\n"
              },
              "tools_metadata": {
                "_input_type": "ToolsInput",
                "advanced": false,
                "display_name": "Actions",
                "dynamic": false,
                "info": "Modify tool names and descriptions to help agents understand when to use each tool.",
                "is_list": true,
                "list_add_label": "Add More",
                "name": "tools_metadata",
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "tools",
                "value": [
                  {
                    "args": {
                      "urls": {
                        "default": "",
                        "description": "",
                        "items": {
                          "type": "string"
                        },
                        "title": "Urls",
                        "type": "array"
                      }
                    },
                    "description": "URL. fetch_content() - Load and retrieve data from specified URLs. Supports output in plain text, raw HTML, or JSON, with options for cleaning and separating multiple outputs.",
                    "display_description": "URL. fetch_content() - Load and retrieve data from specified URLs. Supports output in plain text, raw HTML, or JSON, with options for cleaning and separating multiple outputs.",
                    "display_name": "fetch_content",
                    "name": "fetch_content",
                    "status": true,
                    "tags": [
                      "fetch_content"
                    ]
                  },
                  {
                    "args": {
                      "urls": {
                        "default": "",
                        "description": "",
                        "items": {
                          "type": "string"
                        },
                        "title": "Urls",
                        "type": "array"
                      }
                    },
                    "description": "URL. fetch_content_text() - Load and retrieve data from specified URLs. Supports output in plain text, raw HTML, or JSON, with options for cleaning and separating multiple outputs.",
                    "display_description": "URL. fetch_content_text() - Load and retrieve data from specified URLs. Supports output in plain text, raw HTML, or JSON, with options for cleaning and separating multiple outputs.",
                    "display_name": "fetch_content_text",
                    "name": "fetch_content_text",
                    "status": true,
                    "tags": [
                      "fetch_content_text"
                    ]
                  },
                  {
                    "args": {
                      "urls": {
                        "default": "",
                        "description": "",
                        "items": {
                          "type": "string"
                        },
                        "title": "Urls",
                        "type": "array"
                      }
                    },
                    "description": "URL. as_dataframe() - Load and retrieve data from specified URLs. Supports output in plain text, raw HTML, or JSON, with options for cleaning and separating multiple outputs.",
                    "display_description": "URL. as_dataframe() - Load and retrieve data from specified URLs. Supports output in plain text, raw HTML, or JSON, with options for cleaning and separating multiple outputs.",
                    "display_name": "as_dataframe",
                    "name": "as_dataframe",
                    "status": true,
                    "tags": [
                      "as_dataframe"
                    ]
                  }
                ]
              },
              "urls": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "URLs",
                "dynamic": false,
                "info": "",
                "input_types": [
                  "Message"
                ],
                "list": true,
                "list_add_label": "Add URL",
                "load_from_db": false,
                "name": "urls",
                "placeholder": "Enter a URL...",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": true
          },
          "type": "URL"
        },
        "dragging": false,
        "id": "URL-xMkct",
        "measured": {
          "height": 483,
          "width": 320
        },
        "position": {
          "x": 1236.8269016193576,
          "y": -173.8644169438124
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "note-bdnMY",
          "node": {
            "description": "# 📖 README\nRun an Agent with URL and Calculator tools available for its use. \nThe Agent decides which tool to use to solve a problem.\n## Quick start\n\n1. Add your OpenAI API key to the Agent.\n2. Open the Playground and chat with the Agent. Request some information about a recipe, and then ask to add two numbers together. In the responses, the Agent will use different tools to solve different problems.\n\n## Next steps\nConnect more tools to the Agent to create your perfect assistant.\n\nFor more, see the [Langflow docs](https://docs.langflow.org/agents-tool-calling-agent-component).",
            "display_name": "",
            "documentation": "",
            "template": {
              "backgroundColor": "neutral"
            }
          },
          "type": "note"
        },
        "dragging": false,
        "id": "note-bdnMY",
        "measured": {
          "height": 630,
          "width": 575
        },
        "position": {
          "x": 318.94656783617904,
          "y": -69.37657162377457
        },
        "selected": false,
        "type": "noteNode"
      },
      {
        "data": {
          "id": "note-Rnha0",
          "node": {
            "description": "### 💡 Add your OpenAI API key here👇",
            "display_name": "",
            "documentation": "",
            "template": {
              "backgroundColor": "transparent"
            }
          },
          "type": "note"
        },
        "dragging": false,
        "id": "note-Rnha0",
        "measured": {
          "height": 324,
          "width": 324
        },
        "position": {
          "x": 2394.517029933798,
          "y": -279.7958755782514
        },
        "selected": false,
        "type": "noteNode"
      },
      {
        "data": {
          "description": "Perform basic arithmetic operations on a given expression.",
          "display_name": "Calculator",
          "id": "CalculatorComponent-wYV8J",
          "node": {
            "base_classes": [
              "Data"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Perform basic arithmetic operations on a given expression.",
            "display_name": "Calculator",
            "documentation": "https://docs.langflow.org/components-helpers#calculator",
            "edited": false,
            "field_order": [
              "expression"
            ],
            "frozen": false,
            "icon": "calculator",
            "last_updated": "2025-07-22T05:02:32.990Z",
            "legacy": false,
            "lf_version": "1.5.0.post1",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Toolset",
                "group_outputs": false,
                "hidden": false,
                "method": "to_toolkit",
                "name": "component_as_tool",
                "options": null,
                "required_inputs": null,
                "selected": "Tool",
                "tool_mode": true,
                "types": [
                  "Tool"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "import ast\nimport operator\nfrom collections.abc import Callable\n\nfrom langflow.custom.custom_component.component import Component\nfrom langflow.inputs.inputs import MessageTextInput\nfrom langflow.io import Output\nfrom langflow.schema.data import Data\n\n\nclass CalculatorComponent(Component):\n    display_name = \"Calculator\"\n    description = \"Perform basic arithmetic operations on a given expression.\"\n    documentation: str = \"https://docs.langflow.org/components-helpers#calculator\"\n    icon = \"calculator\"\n\n    # Cache operators dictionary as a class variable\n    OPERATORS: dict[type[ast.operator], Callable] = {\n        ast.Add: operator.add,\n        ast.Sub: operator.sub,\n        ast.Mult: operator.mul,\n        ast.Div: operator.truediv,\n        ast.Pow: operator.pow,\n    }\n\n    inputs = [\n        MessageTextInput(\n            name=\"expression\",\n            display_name=\"Expression\",\n            info=\"The arithmetic expression to evaluate (e.g., '4*4*(33/22)+12-20').\",\n            tool_mode=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"result\", type_=Data, method=\"evaluate_expression\"),\n    ]\n\n    def _eval_expr(self, node: ast.AST) -> float:\n        \"\"\"Evaluate an AST node recursively.\"\"\"\n        if isinstance(node, ast.Constant):\n            if isinstance(node.value, int | float):\n                return float(node.value)\n            error_msg = f\"Unsupported constant type: {type(node.value).__name__}\"\n            raise TypeError(error_msg)\n        if isinstance(node, ast.Num):  # For backwards compatibility\n            if isinstance(node.n, int | float):\n                return float(node.n)\n            error_msg = f\"Unsupported number type: {type(node.n).__name__}\"\n            raise TypeError(error_msg)\n\n        if isinstance(node, ast.BinOp):\n            op_type = type(node.op)\n            if op_type not in self.OPERATORS:\n                error_msg = f\"Unsupported binary operator: {op_type.__name__}\"\n                raise TypeError(error_msg)\n\n            left = self._eval_expr(node.left)\n            right = self._eval_expr(node.right)\n            return self.OPERATORS[op_type](left, right)\n\n        error_msg = f\"Unsupported operation or expression type: {type(node).__name__}\"\n        raise TypeError(error_msg)\n\n    def evaluate_expression(self) -> Data:\n        \"\"\"Evaluate the mathematical expression and return the result.\"\"\"\n        try:\n            tree = ast.parse(self.expression, mode=\"eval\")\n            result = self._eval_expr(tree.body)\n\n            formatted_result = f\"{float(result):.6f}\".rstrip(\"0\").rstrip(\".\")\n            self.log(f\"Calculation result: {formatted_result}\")\n\n            self.status = formatted_result\n            return Data(data={\"result\": formatted_result})\n\n        except ZeroDivisionError:\n            error_message = \"Error: Division by zero\"\n            self.status = error_message\n            return Data(data={\"error\": error_message, \"input\": self.expression})\n\n        except (SyntaxError, TypeError, KeyError, ValueError, AttributeError, OverflowError) as e:\n            error_message = f\"Invalid expression: {e!s}\"\n            self.status = error_message\n            return Data(data={\"error\": error_message, \"input\": self.expression})\n\n    def build(self):\n        \"\"\"Return the main evaluation function.\"\"\"\n        return self.evaluate_expression\n"
              },
              "expression": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Expression",
                "dynamic": false,
                "info": "The arithmetic expression to evaluate (e.g., '4*4*(33/22)+12-20').",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "expression",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "tools_metadata": {
                "_input_type": "ToolsInput",
                "advanced": false,
                "display_name": "Actions",
                "dynamic": false,
                "info": "Modify tool names and descriptions to help agents understand when to use each tool.",
                "is_list": true,
                "list_add_label": "Add More",
                "name": "tools_metadata",
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "tools",
                "value": [
                  {
                    "args": {
                      "expression": {
                        "default": "",
                        "description": "The arithmetic expression to evaluate (e.g., '4*4*(33/22)+12-20').",
                        "title": "Expression",
                        "type": "string"
                      }
                    },
                    "description": "Perform basic arithmetic operations on a given expression.",
                    "display_description": "Perform basic arithmetic operations on a given expression.",
                    "display_name": "evaluate_expression",
                    "name": "evaluate_expression",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "evaluate_expression"
                    ]
                  }
                ]
              }
            },
            "tool_mode": true
          },
          "showNode": true,
          "type": "CalculatorComponent"
        },
        "dragging": false,
        "id": "CalculatorComponent-wYV8J",
        "measured": {
          "height": 217,
          "width": 320
        },
        "position": {
          "x": 1247.680843949799,
          "y": 364.33049833697413
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "description": "Get chat inputs from the Playground.",
          "display_name": "Chat Input",
          "id": "ChatInput-J8CSX",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Get chat inputs from the Playground.",
            "display_name": "Chat Input",
            "documentation": "https://docs.langflow.org/components-io#chat-input",
            "edited": false,
            "field_order": [
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "files",
              "background_color",
              "chat_icon",
              "text_color"
            ],
            "frozen": false,
            "icon": "MessagesSquare",
            "legacy": false,
            "lf_version": "1.5.0.post1",
            "metadata": {},
            "minimized": true,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Chat Message",
                "group_outputs": false,
                "method": "message_response",
                "name": "message",
                "options": null,
                "required_inputs": null,
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "background_color": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Background Color",
                "dynamic": false,
                "info": "The background color of the icon.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "background_color",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "chat_icon": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Icon",
                "dynamic": false,
                "info": "The icon of the message.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "chat_icon",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs.inputs import BoolInput\nfrom langflow.io import (\n    DropdownInput,\n    FileInput,\n    MessageTextInput,\n    MultilineInput,\n    Output,\n)\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_USER,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    documentation: str = \"https://docs.langflow.org/components-io#chat-input\"\n    icon = \"MessagesSquare\"\n    name = \"ChatInput\"\n    minimized = True\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Input Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n            input_types=[],\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_USER,\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_USER,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n            temp_file=True,\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Chat Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    async def message_response(self) -> Message:\n        background_color = self.background_color\n        text_color = self.text_color\n        icon = self.chat_icon\n\n        message = await Message.create(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n            properties={\n                \"background_color\": background_color,\n                \"text_color\": text_color,\n                \"icon\": icon,\n            },\n        )\n        if self.session_id and isinstance(message, Message) and self.should_store_message:\n            stored_message = await self.send_message(\n                message,\n            )\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n"
              },
              "files": {
                "_input_type": "FileInput",
                "advanced": true,
                "display_name": "Files",
                "dynamic": false,
                "fileTypes": [
                  "txt",
                  "md",
                  "mdx",
                  "csv",
                  "json",
                  "yaml",
                  "yml",
                  "xml",
                  "html",
                  "htm",
                  "pdf",
                  "docx",
                  "py",
                  "sh",
                  "sql",
                  "js",
                  "ts",
                  "tsx",
                  "jpg",
                  "jpeg",
                  "png",
                  "bmp",
                  "image"
                ],
                "file_path": "",
                "info": "Files to be sent with the message.",
                "list": true,
                "list_add_label": "Add More",
                "name": "files",
                "placeholder": "",
                "required": false,
                "show": true,
                "temp_file": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "file",
                "value": ""
              },
              "input_value": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "copy_field": false,
                "display_name": "Input Text",
                "dynamic": false,
                "info": "Message to be passed as input.",
                "input_types": [],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "input_value",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "sender": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Sender Type",
                "dynamic": false,
                "info": "Type of sender.",
                "name": "sender",
                "options": [
                  "Machine",
                  "User"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "User"
              },
              "sender_name": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Sender Name",
                "dynamic": false,
                "info": "Name of the sender.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "sender_name",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "User"
              },
              "session_id": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Session ID",
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "session_id",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "should_store_message": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Store Messages",
                "dynamic": false,
                "info": "Store the message in the history.",
                "list": false,
                "list_add_label": "Add More",
                "name": "should_store_message",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "text_color": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Text Color",
                "dynamic": false,
                "info": "The text color of the name",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "text_color",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "ChatInput"
        },
        "dragging": false,
        "id": "ChatInput-J8CSX",
        "measured": {
          "height": 203,
          "width": 320
        },
        "position": {
          "x": 2228.0512157265375,
          "y": 1164.5795133339932
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "description": "Display a chat message in the Playground.",
          "display_name": "Chat Output",
          "id": "ChatOutput-u2fHd",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Display a chat message in the Playground.",
            "display_name": "Chat Output",
            "documentation": "https://docs.langflow.org/components-io#chat-output",
            "edited": false,
            "field_order": [
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "data_template",
              "background_color",
              "chat_icon",
              "text_color",
              "clean_data"
            ],
            "frozen": false,
            "icon": "MessagesSquare",
            "legacy": false,
            "lf_version": "1.5.0.post1",
            "metadata": {},
            "minimized": true,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Output Message",
                "group_outputs": false,
                "method": "message_response",
                "name": "message",
                "options": null,
                "required_inputs": null,
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "background_color": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Background Color",
                "dynamic": false,
                "info": "The background color of the icon.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "background_color",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "chat_icon": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Icon",
                "dynamic": false,
                "info": "The icon of the message.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "chat_icon",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "clean_data": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Basic Clean Data",
                "dynamic": false,
                "info": "Whether to clean the data",
                "list": false,
                "list_add_label": "Add More",
                "name": "clean_data",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from collections.abc import Generator\nfrom typing import Any\n\nimport orjson\nfrom fastapi.encoders import jsonable_encoder\n\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.helpers.data import safe_convert\nfrom langflow.inputs.inputs import BoolInput, DropdownInput, HandleInput, MessageTextInput\nfrom langflow.schema.data import Data\nfrom langflow.schema.dataframe import DataFrame\nfrom langflow.schema.message import Message\nfrom langflow.schema.properties import Source\nfrom langflow.template.field.base import Output\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_AI,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    documentation: str = \"https://docs.langflow.org/components-io#chat-output\"\n    icon = \"MessagesSquare\"\n    name = \"ChatOutput\"\n    minimized = True\n\n    inputs = [\n        HandleInput(\n            name=\"input_value\",\n            display_name=\"Inputs\",\n            info=\"Message to be passed as output.\",\n            input_types=[\"Data\", \"DataFrame\", \"Message\"],\n            required=True,\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"clean_data\",\n            display_name=\"Basic Clean Data\",\n            value=True,\n            info=\"Whether to clean the data\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(\n            display_name=\"Output Message\",\n            name=\"message\",\n            method=\"message_response\",\n        ),\n    ]\n\n    def _build_source(self, id_: str | None, display_name: str | None, source: str | None) -> Source:\n        source_dict = {}\n        if id_:\n            source_dict[\"id\"] = id_\n        if display_name:\n            source_dict[\"display_name\"] = display_name\n        if source:\n            # Handle case where source is a ChatOpenAI object\n            if hasattr(source, \"model_name\"):\n                source_dict[\"source\"] = source.model_name\n            elif hasattr(source, \"model\"):\n                source_dict[\"source\"] = str(source.model)\n            else:\n                source_dict[\"source\"] = str(source)\n        return Source(**source_dict)\n\n    async def message_response(self) -> Message:\n        # First convert the input to string if needed\n        text = self.convert_to_string()\n\n        # Get source properties\n        source, icon, display_name, source_id = self.get_properties_from_source_component()\n        background_color = self.background_color\n        text_color = self.text_color\n        if self.chat_icon:\n            icon = self.chat_icon\n\n        # Create or use existing Message object\n        if isinstance(self.input_value, Message):\n            message = self.input_value\n            # Update message properties\n            message.text = text\n        else:\n            message = Message(text=text)\n\n        # Set message properties\n        message.sender = self.sender\n        message.sender_name = self.sender_name\n        message.session_id = self.session_id\n        message.flow_id = self.graph.flow_id if hasattr(self, \"graph\") else None\n        message.properties.source = self._build_source(source_id, display_name, source)\n        message.properties.icon = icon\n        message.properties.background_color = background_color\n        message.properties.text_color = text_color\n\n        # Store message if needed\n        if self.session_id and self.should_store_message:\n            stored_message = await self.send_message(message)\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n\n    def _serialize_data(self, data: Data) -> str:\n        \"\"\"Serialize Data object to JSON string.\"\"\"\n        # Convert data.data to JSON-serializable format\n        serializable_data = jsonable_encoder(data.data)\n        # Serialize with orjson, enabling pretty printing with indentation\n        json_bytes = orjson.dumps(serializable_data, option=orjson.OPT_INDENT_2)\n        # Convert bytes to string and wrap in Markdown code blocks\n        return \"```json\\n\" + json_bytes.decode(\"utf-8\") + \"\\n```\"\n\n    def _validate_input(self) -> None:\n        \"\"\"Validate the input data and raise ValueError if invalid.\"\"\"\n        if self.input_value is None:\n            msg = \"Input data cannot be None\"\n            raise ValueError(msg)\n        if isinstance(self.input_value, list) and not all(\n            isinstance(item, Message | Data | DataFrame | str) for item in self.input_value\n        ):\n            invalid_types = [\n                type(item).__name__\n                for item in self.input_value\n                if not isinstance(item, Message | Data | DataFrame | str)\n            ]\n            msg = f\"Expected Data or DataFrame or Message or str, got {invalid_types}\"\n            raise TypeError(msg)\n        if not isinstance(\n            self.input_value,\n            Message | Data | DataFrame | str | list | Generator | type(None),\n        ):\n            type_name = type(self.input_value).__name__\n            msg = f\"Expected Data or DataFrame or Message or str, Generator or None, got {type_name}\"\n            raise TypeError(msg)\n\n    def convert_to_string(self) -> str | Generator[Any, None, None]:\n        \"\"\"Convert input data to string with proper error handling.\"\"\"\n        self._validate_input()\n        if isinstance(self.input_value, list):\n            return \"\\n\".join([safe_convert(item, clean_data=self.clean_data) for item in self.input_value])\n        if isinstance(self.input_value, Generator):\n            return self.input_value\n        return safe_convert(self.input_value)\n"
              },
              "data_template": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Data Template",
                "dynamic": false,
                "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "data_template",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "{text}"
              },
              "input_value": {
                "_input_type": "HandleInput",
                "advanced": false,
                "display_name": "Inputs",
                "dynamic": false,
                "info": "Message to be passed as output.",
                "input_types": [
                  "Data",
                  "DataFrame",
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "name": "input_value",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "sender": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Sender Type",
                "dynamic": false,
                "info": "Type of sender.",
                "name": "sender",
                "options": [
                  "Machine",
                  "User"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Machine"
              },
              "sender_name": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Sender Name",
                "dynamic": false,
                "info": "Name of the sender.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "sender_name",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "AI"
              },
              "session_id": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Session ID",
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "session_id",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "should_store_message": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Store Messages",
                "dynamic": false,
                "info": "Store the message in the history.",
                "list": false,
                "list_add_label": "Add More",
                "name": "should_store_message",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "text_color": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Text Color",
                "dynamic": false,
                "info": "The text color of the name",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "text_color",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": false,
          "type": "ChatOutput"
        },
        "dragging": false,
        "id": "ChatOutput-u2fHd",
        "measured": {
          "height": 48,
          "width": 192
        },
        "position": {
          "x": 3184.6376465903054,
          "y": 783.7868539019385
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "description": "Define the agent's instructions, then enter a task to complete using tools.",
          "display_name": "Agent",
          "id": "Agent-7oLa6",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Define the agent's instructions, then enter a task to complete using tools.",
            "display_name": "Agent",
            "documentation": "https://docs.langflow.org/agents",
            "edited": false,
            "field_order": [
              "agent_llm",
              "max_tokens",
              "model_kwargs",
              "json_mode",
              "model_name",
              "openai_api_base",
              "api_key",
              "temperature",
              "seed",
              "max_retries",
              "timeout",
              "system_prompt",
              "n_messages",
              "tools",
              "input_value",
              "handle_parsing_errors",
              "verbose",
              "max_iterations",
              "agent_description",
              "add_current_date_tool"
            ],
            "frozen": false,
            "icon": "bot",
            "last_updated": "2025-07-22T05:02:34.158Z",
            "legacy": false,
            "lf_version": "1.5.0.post1",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Response",
                "group_outputs": false,
                "hidden": false,
                "method": "message_response",
                "name": "response",
                "options": null,
                "required_inputs": null,
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "add_current_date_tool": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Current Date",
                "dynamic": false,
                "info": "If true, will add a tool to the agent that returns the current date.",
                "input_types": [],
                "list": false,
                "list_add_label": "Add More",
                "name": "add_current_date_tool",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "agent_description": {
                "_input_type": "MultilineInput",
                "advanced": true,
                "copy_field": false,
                "display_name": "Agent Description [Deprecated]",
                "dynamic": false,
                "info": "The description of the agent. This is only used when in Tool Mode. Defaults to 'A helpful assistant with access to the following tools:' and tools are added dynamically. This feature is deprecated and will be removed in future versions.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "agent_description",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "A helpful assistant with access to the following tools:"
              },
              "agent_llm": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Language Model",
                "dynamic": false,
                "info": "",
                "input_types": [
                  "LanguageModel"
                ],
                "name": "agent_llm",
                "options": [
                  "Anthropic",
                  "Google Generative AI",
                  "Groq",
                  "OpenAI",
                  "Custom"
                ],
                "options_metadata": [
                  {
                    "icon": "Anthropic"
                  },
                  {
                    "icon": "GoogleGenerativeAI"
                  },
                  {
                    "icon": "Groq"
                  },
                  {
                    "icon": "OpenAI"
                  },
                  {
                    "icon": "brain"
                  }
                ],
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langchain_core.tools import StructuredTool\n\nfrom langflow.base.agents.agent import LCToolsAgentComponent\nfrom langflow.base.agents.events import ExceptionWithMessageError\nfrom langflow.base.models.model_input_constants import (\n    ALL_PROVIDER_FIELDS,\n    MODEL_DYNAMIC_UPDATE_FIELDS,\n    MODEL_PROVIDERS,\n    MODEL_PROVIDERS_DICT,\n    MODELS_METADATA,\n)\nfrom langflow.base.models.model_utils import get_model_name\nfrom langflow.components.helpers.current_date import CurrentDateComponent\nfrom langflow.components.helpers.memory import MemoryComponent\nfrom langflow.components.langchain_utilities.tool_calling import ToolCallingAgentComponent\nfrom langflow.custom.custom_component.component import _get_component_toolkit\nfrom langflow.custom.utils import update_component_build_config\nfrom langflow.field_typing import Tool\nfrom langflow.io import BoolInput, DropdownInput, IntInput, MultilineInput, Output\nfrom langflow.logging import logger\nfrom langflow.schema.dotdict import dotdict\nfrom langflow.schema.message import Message\n\n\ndef set_advanced_true(component_input):\n    component_input.advanced = True\n    return component_input\n\n\nMODEL_PROVIDERS_LIST = [\"Anthropic\", \"Google Generative AI\", \"Groq\", \"OpenAI\"]\n\n\nclass AgentComponent(ToolCallingAgentComponent):\n    display_name: str = \"Agent\"\n    description: str = \"Define the agent's instructions, then enter a task to complete using tools.\"\n    documentation: str = \"https://docs.langflow.org/agents\"\n    icon = \"bot\"\n    beta = False\n    name = \"Agent\"\n\n    memory_inputs = [set_advanced_true(component_input) for component_input in MemoryComponent().inputs]\n\n    inputs = [\n        DropdownInput(\n            name=\"agent_llm\",\n            display_name=\"Model Provider\",\n            info=\"The provider of the language model that the agent will use to generate responses.\",\n            options=[*MODEL_PROVIDERS_LIST, \"Custom\"],\n            value=\"OpenAI\",\n            real_time_refresh=True,\n            input_types=[],\n            options_metadata=[MODELS_METADATA[key] for key in MODEL_PROVIDERS_LIST] + [{\"icon\": \"brain\"}],\n        ),\n        *MODEL_PROVIDERS_DICT[\"OpenAI\"][\"inputs\"],\n        MultilineInput(\n            name=\"system_prompt\",\n            display_name=\"Agent Instructions\",\n            info=\"System Prompt: Initial instructions and context provided to guide the agent's behavior.\",\n            value=\"You are a helpful assistant that can use tools to answer questions and perform tasks.\",\n            advanced=False,\n        ),\n        IntInput(\n            name=\"n_messages\",\n            display_name=\"Number of Chat History Messages\",\n            value=100,\n            info=\"Number of chat history messages to retrieve.\",\n            advanced=True,\n            show=True,\n        ),\n        *LCToolsAgentComponent._base_inputs,\n        # removed memory inputs from agent component\n        # *memory_inputs,\n        BoolInput(\n            name=\"add_current_date_tool\",\n            display_name=\"Current Date\",\n            advanced=True,\n            info=\"If true, will add a tool to the agent that returns the current date.\",\n            value=True,\n        ),\n    ]\n    outputs = [Output(name=\"response\", display_name=\"Response\", method=\"message_response\")]\n\n    async def message_response(self) -> Message:\n        try:\n            # Get LLM model and validate\n            llm_model, display_name = self.get_llm()\n            if llm_model is None:\n                msg = \"No language model selected. Please choose a model to proceed.\"\n                raise ValueError(msg)\n            self.model_name = get_model_name(llm_model, display_name=display_name)\n\n            # Get memory data\n            self.chat_history = await self.get_memory_data()\n            if isinstance(self.chat_history, Message):\n                self.chat_history = [self.chat_history]\n\n            # Add current date tool if enabled\n            if self.add_current_date_tool:\n                if not isinstance(self.tools, list):  # type: ignore[has-type]\n                    self.tools = []\n                current_date_tool = (await CurrentDateComponent(**self.get_base_args()).to_toolkit()).pop(0)\n                if not isinstance(current_date_tool, StructuredTool):\n                    msg = \"CurrentDateComponent must be converted to a StructuredTool\"\n                    raise TypeError(msg)\n                self.tools.append(current_date_tool)\n            # note the tools are not required to run the agent, hence the validation removed.\n\n            # Set up and run agent\n            self.set(\n                llm=llm_model,\n                tools=self.tools or [],\n                chat_history=self.chat_history,\n                input_value=self.input_value,\n                system_prompt=self.system_prompt,\n            )\n            agent = self.create_agent_runnable()\n            return await self.run_agent(agent)\n\n        except (ValueError, TypeError, KeyError) as e:\n            logger.error(f\"{type(e).__name__}: {e!s}\")\n            raise\n        except ExceptionWithMessageError as e:\n            logger.error(f\"ExceptionWithMessageError occurred: {e}\")\n            raise\n        except Exception as e:\n            logger.error(f\"Unexpected error: {e!s}\")\n            raise\n\n    async def get_memory_data(self):\n        # TODO: This is a temporary fix to avoid message duplication. We should develop a function for this.\n        messages = (\n            await MemoryComponent(**self.get_base_args())\n            .set(session_id=self.graph.session_id, order=\"Ascending\", n_messages=self.n_messages)\n            .retrieve_messages()\n        )\n        return [\n            message for message in messages if getattr(message, \"id\", None) != getattr(self.input_value, \"id\", None)\n        ]\n\n    def get_llm(self):\n        if not isinstance(self.agent_llm, str):\n            return self.agent_llm, None\n\n        try:\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if not provider_info:\n                msg = f\"Invalid model provider: {self.agent_llm}\"\n                raise ValueError(msg)\n\n            component_class = provider_info.get(\"component_class\")\n            display_name = component_class.display_name\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\", \"\")\n\n            return self._build_llm_model(component_class, inputs, prefix), display_name\n\n        except Exception as e:\n            logger.error(f\"Error building {self.agent_llm} language model: {e!s}\")\n            msg = f\"Failed to initialize language model: {e!s}\"\n            raise ValueError(msg) from e\n\n    def _build_llm_model(self, component, inputs, prefix=\"\"):\n        model_kwargs = {}\n        for input_ in inputs:\n            if hasattr(self, f\"{prefix}{input_.name}\"):\n                model_kwargs[input_.name] = getattr(self, f\"{prefix}{input_.name}\")\n        return component.set(**model_kwargs).build_model()\n\n    def set_component_params(self, component):\n        provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n        if provider_info:\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\")\n            model_kwargs = {input_.name: getattr(self, f\"{prefix}{input_.name}\") for input_ in inputs}\n\n            return component.set(**model_kwargs)\n        return component\n\n    def delete_fields(self, build_config: dotdict, fields: dict | list[str]) -> None:\n        \"\"\"Delete specified fields from build_config.\"\"\"\n        for field in fields:\n            build_config.pop(field, None)\n\n    def update_input_types(self, build_config: dotdict) -> dotdict:\n        \"\"\"Update input types for all fields in build_config.\"\"\"\n        for key, value in build_config.items():\n            if isinstance(value, dict):\n                if value.get(\"input_types\") is None:\n                    build_config[key][\"input_types\"] = []\n            elif hasattr(value, \"input_types\") and value.input_types is None:\n                value.input_types = []\n        return build_config\n\n    async def update_build_config(\n        self, build_config: dotdict, field_value: str, field_name: str | None = None\n    ) -> dotdict:\n        # Iterate over all providers in the MODEL_PROVIDERS_DICT\n        # Existing logic for updating build_config\n        if field_name in (\"agent_llm\",):\n            build_config[\"agent_llm\"][\"value\"] = field_value\n            provider_info = MODEL_PROVIDERS_DICT.get(field_value)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call the component class's update_build_config method\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n\n            provider_configs: dict[str, tuple[dict, list[dict]]] = {\n                provider: (\n                    MODEL_PROVIDERS_DICT[provider][\"fields\"],\n                    [\n                        MODEL_PROVIDERS_DICT[other_provider][\"fields\"]\n                        for other_provider in MODEL_PROVIDERS_DICT\n                        if other_provider != provider\n                    ],\n                )\n                for provider in MODEL_PROVIDERS_DICT\n            }\n            if field_value in provider_configs:\n                fields_to_add, fields_to_delete = provider_configs[field_value]\n\n                # Delete fields from other providers\n                for fields in fields_to_delete:\n                    self.delete_fields(build_config, fields)\n\n                # Add provider-specific fields\n                if field_value == \"OpenAI\" and not any(field in build_config for field in fields_to_add):\n                    build_config.update(fields_to_add)\n                else:\n                    build_config.update(fields_to_add)\n                # Reset input types for agent_llm\n                build_config[\"agent_llm\"][\"input_types\"] = []\n            elif field_value == \"Custom\":\n                # Delete all provider fields\n                self.delete_fields(build_config, ALL_PROVIDER_FIELDS)\n                # Update with custom component\n                custom_component = DropdownInput(\n                    name=\"agent_llm\",\n                    display_name=\"Language Model\",\n                    options=[*sorted(MODEL_PROVIDERS), \"Custom\"],\n                    value=\"Custom\",\n                    real_time_refresh=True,\n                    input_types=[\"LanguageModel\"],\n                    options_metadata=[MODELS_METADATA[key] for key in sorted(MODELS_METADATA.keys())]\n                    + [{\"icon\": \"brain\"}],\n                )\n                build_config.update({\"agent_llm\": custom_component.to_dict()})\n            # Update input types for all fields\n            build_config = self.update_input_types(build_config)\n\n            # Validate required keys\n            default_keys = [\n                \"code\",\n                \"_type\",\n                \"agent_llm\",\n                \"tools\",\n                \"input_value\",\n                \"add_current_date_tool\",\n                \"system_prompt\",\n                \"agent_description\",\n                \"max_iterations\",\n                \"handle_parsing_errors\",\n                \"verbose\",\n            ]\n            missing_keys = [key for key in default_keys if key not in build_config]\n            if missing_keys:\n                msg = f\"Missing required keys in build_config: {missing_keys}\"\n                raise ValueError(msg)\n        if (\n            isinstance(self.agent_llm, str)\n            and self.agent_llm in MODEL_PROVIDERS_DICT\n            and field_name in MODEL_DYNAMIC_UPDATE_FIELDS\n        ):\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                component_class = self.set_component_params(component_class)\n                prefix = provider_info.get(\"prefix\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call each component class's update_build_config method\n                    # remove the prefix from the field_name\n                    if isinstance(field_name, str) and isinstance(prefix, str):\n                        field_name = field_name.replace(prefix, \"\")\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n        return dotdict({k: v.to_dict() if hasattr(v, \"to_dict\") else v for k, v in build_config.items()})\n\n    async def _get_tools(self) -> list[Tool]:\n        component_toolkit = _get_component_toolkit()\n        tools_names = self._build_tools_names()\n        agent_description = self.get_tool_description()\n        # TODO: Agent Description Depreciated Feature to be removed\n        description = f\"{agent_description}{tools_names}\"\n        tools = component_toolkit(component=self).get_tools(\n            tool_name=\"Call_Agent\", tool_description=description, callbacks=self.get_langchain_callbacks()\n        )\n        if hasattr(self, \"tools_metadata\"):\n            tools = component_toolkit(component=self, metadata=self.tools_metadata).update_tools_metadata(tools=tools)\n        return tools\n"
              },
              "handle_parsing_errors": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Handle Parse Errors",
                "dynamic": false,
                "info": "Should the Agent fix errors when reading user input for better processing?",
                "input_types": [],
                "list": false,
                "list_add_label": "Add More",
                "name": "handle_parsing_errors",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "input_value": {
                "_input_type": "MessageInput",
                "advanced": false,
                "display_name": "Input",
                "dynamic": false,
                "info": "The input provided by the user for the agent to process.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "input_value",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "max_iterations": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Max Iterations",
                "dynamic": false,
                "info": "The maximum number of attempts the agent can make to complete its task before it stops.",
                "input_types": [],
                "list": false,
                "list_add_label": "Add More",
                "name": "max_iterations",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 15
              },
              "n_messages": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Number of Chat History Messages",
                "dynamic": false,
                "info": "Number of chat history messages to retrieve.",
                "input_types": [],
                "list": false,
                "list_add_label": "Add More",
                "name": "n_messages",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 100
              },
              "system_prompt": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "copy_field": false,
                "display_name": "Agent Instructions",
                "dynamic": false,
                "info": "System Prompt: Initial instructions and context provided to guide the agent's behavior.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "system_prompt",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "You are a helpful assistant who can use tools to answer questions and perform tasks.\n\nIn addition to simply using tools, you should also anticipate the needs of the person you are assisting. Tools are not just for completing tasks—they are ways to help their owner, keep records, and make notes. You should understand from the context which tool to use based on the potential desires or intentions of the owner. Also, when the owner provides information about what they are doing, you should record this activity using the appropriate tool.\n\nAnswer in Russian"
              },
              "tools": {
                "_input_type": "HandleInput",
                "advanced": false,
                "display_name": "Tools",
                "dynamic": false,
                "info": "These are the tools that the agent can use to help with tasks.",
                "input_types": [
                  "Tool"
                ],
                "list": true,
                "list_add_label": "Add More",
                "name": "tools",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "verbose": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Verbose",
                "dynamic": false,
                "info": "",
                "input_types": [],
                "list": false,
                "list_add_label": "Add More",
                "name": "verbose",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "Agent"
        },
        "dragging": false,
        "id": "Agent-7oLa6",
        "measured": {
          "height": 427,
          "width": 320
        },
        "position": {
          "x": 2261.0119722535674,
          "y": 560.5066175561781
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "description": "Generates text using OpenAI LLMs.",
          "display_name": "OpenAI",
          "id": "OpenAIModel-REaI9",
          "node": {
            "base_classes": [
              "LanguageModel",
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Generates text using OpenAI LLMs.",
            "display_name": "OpenAI",
            "documentation": "",
            "edited": false,
            "field_order": [
              "input_value",
              "system_message",
              "stream",
              "max_tokens",
              "model_kwargs",
              "json_mode",
              "model_name",
              "openai_api_base",
              "api_key",
              "temperature",
              "seed",
              "max_retries",
              "timeout"
            ],
            "frozen": false,
            "icon": "OpenAI",
            "last_updated": "2025-07-21T18:09:28.745Z",
            "legacy": false,
            "lf_version": "1.5.0.post1",
            "metadata": {
              "keywords": [
                "model",
                "llm",
                "language model",
                "large language model"
              ]
            },
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Model Response",
                "group_outputs": false,
                "method": "text_response",
                "name": "text_output",
                "options": null,
                "required_inputs": null,
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              },
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Language Model",
                "group_outputs": false,
                "hidden": false,
                "method": "build_model",
                "name": "model_output",
                "options": null,
                "required_inputs": null,
                "selected": "LanguageModel",
                "tool_mode": true,
                "types": [
                  "LanguageModel"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "api_key": {
                "_input_type": "SecretStrInput",
                "advanced": false,
                "display_name": "OpenAI API Key",
                "dynamic": false,
                "info": "The OpenAI API Key to use for the OpenAI model.",
                "input_types": [],
                "load_from_db": false,
                "name": "api_key",
                "password": true,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from typing import Any\n\nfrom langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.base.models.openai_constants import (\n    OPENAI_CHAT_MODEL_NAMES,\n    OPENAI_REASONING_MODEL_NAMES,\n)\nfrom langflow.field_typing import LanguageModel\nfrom langflow.field_typing.range_spec import RangeSpec\nfrom langflow.inputs.inputs import BoolInput, DictInput, DropdownInput, IntInput, SecretStrInput, SliderInput, StrInput\nfrom langflow.logging import logger\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIModel\"\n\n    inputs = [\n        *LCModelComponent._base_inputs,\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Tokens\",\n            advanced=True,\n            info=\"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n            range_spec=RangeSpec(min=0, max=128000),\n        ),\n        DictInput(\n            name=\"model_kwargs\",\n            display_name=\"Model Kwargs\",\n            advanced=True,\n            info=\"Additional keyword arguments to pass to the model.\",\n        ),\n        BoolInput(\n            name=\"json_mode\",\n            display_name=\"JSON Mode\",\n            advanced=True,\n            info=\"If True, it will output JSON regardless of passing a schema.\",\n        ),\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Model Name\",\n            advanced=False,\n            options=OPENAI_CHAT_MODEL_NAMES + OPENAI_REASONING_MODEL_NAMES,\n            value=OPENAI_CHAT_MODEL_NAMES[0],\n            combobox=True,\n            real_time_refresh=True,\n        ),\n        StrInput(\n            name=\"openai_api_base\",\n            display_name=\"OpenAI API Base\",\n            advanced=True,\n            info=\"The base URL of the OpenAI API. \"\n            \"Defaults to https://api.openai.com/v1. \"\n            \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\",\n        ),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"OpenAI API Key\",\n            info=\"The OpenAI API Key to use for the OpenAI model.\",\n            advanced=False,\n            value=\"OPENAI_API_KEY\",\n            required=True,\n        ),\n        SliderInput(\n            name=\"temperature\",\n            display_name=\"Temperature\",\n            value=0.1,\n            range_spec=RangeSpec(min=0, max=1, step=0.01),\n            show=True,\n        ),\n        IntInput(\n            name=\"seed\",\n            display_name=\"Seed\",\n            info=\"The seed controls the reproducibility of the job.\",\n            advanced=True,\n            value=1,\n        ),\n        IntInput(\n            name=\"max_retries\",\n            display_name=\"Max Retries\",\n            info=\"The maximum number of retries to make when generating.\",\n            advanced=True,\n            value=5,\n        ),\n        IntInput(\n            name=\"timeout\",\n            display_name=\"Timeout\",\n            info=\"The timeout for requests to OpenAI completion API.\",\n            advanced=True,\n            value=700,\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        logger.debug(f\"Executing request with model: {self.model_name}\")\n        parameters = {\n            \"api_key\": SecretStr(self.api_key).get_secret_value() if self.api_key else None,\n            \"model_name\": self.model_name,\n            \"max_tokens\": self.max_tokens or None,\n            \"model_kwargs\": self.model_kwargs or {},\n            \"base_url\": self.openai_api_base or \"https://api.openai.com/v1\",\n            \"max_retries\": self.max_retries,\n            \"timeout\": self.timeout,\n        }\n\n        # TODO: Revisit if/once parameters are supported for reasoning models\n        unsupported_params_for_reasoning_models = [\"temperature\", \"seed\"]\n\n        if self.model_name not in OPENAI_REASONING_MODEL_NAMES:\n            parameters[\"temperature\"] = self.temperature if self.temperature is not None else 0.1\n            parameters[\"seed\"] = self.seed\n        else:\n            params_str = \", \".join(unsupported_params_for_reasoning_models)\n            logger.debug(f\"{self.model_name} is a reasoning model, {params_str} are not configurable. Ignoring.\")\n\n        output = ChatOpenAI(**parameters)\n        if self.json_mode:\n            output = output.bind(response_format={\"type\": \"json_object\"})\n\n        return output\n\n    def _get_exception_message(self, e: Exception):\n        \"\"\"Get a message from an OpenAI exception.\n\n        Args:\n            e (Exception): The exception to get the message from.\n\n        Returns:\n            str: The message from the exception.\n        \"\"\"\n        try:\n            from openai import BadRequestError\n        except ImportError:\n            return None\n        if isinstance(e, BadRequestError):\n            message = e.body.get(\"message\")\n            if message:\n                return message\n        return None\n\n    def update_build_config(self, build_config: dict, field_value: Any, field_name: str | None = None) -> dict:\n        if field_name in {\"base_url\", \"model_name\", \"api_key\"} and field_value in OPENAI_REASONING_MODEL_NAMES:\n            build_config[\"temperature\"][\"show\"] = False\n            build_config[\"seed\"][\"show\"] = False\n            # Hide system_message for o1 models - currently unsupported\n            if field_value.startswith(\"o1\") and \"system_message\" in build_config:\n                build_config[\"system_message\"][\"show\"] = False\n        if field_name in {\"base_url\", \"model_name\", \"api_key\"} and field_value in OPENAI_CHAT_MODEL_NAMES:\n            build_config[\"temperature\"][\"show\"] = True\n            build_config[\"seed\"][\"show\"] = True\n            if \"system_message\" in build_config:\n                build_config[\"system_message\"][\"show\"] = True\n        return build_config\n"
              },
              "input_value": {
                "_input_type": "MessageInput",
                "advanced": false,
                "display_name": "Input",
                "dynamic": false,
                "info": "",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "input_value",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "json_mode": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "JSON Mode",
                "dynamic": false,
                "info": "If True, it will output JSON regardless of passing a schema.",
                "list": false,
                "list_add_label": "Add More",
                "name": "json_mode",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "max_retries": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Max Retries",
                "dynamic": false,
                "info": "The maximum number of retries to make when generating.",
                "list": false,
                "list_add_label": "Add More",
                "name": "max_retries",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 5
              },
              "max_tokens": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Max Tokens",
                "dynamic": false,
                "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                "list": false,
                "list_add_label": "Add More",
                "name": "max_tokens",
                "placeholder": "",
                "range_spec": {
                  "max": 128000,
                  "min": 0,
                  "step": 0.1,
                  "step_type": "float"
                },
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": ""
              },
              "model_kwargs": {
                "_input_type": "DictInput",
                "advanced": true,
                "display_name": "Model Kwargs",
                "dynamic": false,
                "info": "Additional keyword arguments to pass to the model.",
                "list": false,
                "list_add_label": "Add More",
                "name": "model_kwargs",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "type": "dict",
                "value": {}
              },
              "model_name": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": true,
                "dialog_inputs": {},
                "display_name": "Model Name",
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "name": "model_name",
                "options": [
                  "gpt-4o-mini",
                  "gpt-4o",
                  "gpt-4.1",
                  "gpt-4.1-mini",
                  "gpt-4.1-nano",
                  "gpt-4.5-preview",
                  "gpt-4-turbo",
                  "gpt-4-turbo-preview",
                  "gpt-4",
                  "gpt-3.5-turbo",
                  "o1",
                  "o1-mini",
                  "o1-pro",
                  "o3-mini",
                  "o3",
                  "o3-pro",
                  "o4-mini",
                  "o4-mini-high"
                ],
                "options_metadata": [],
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "openai/gpt-4.1-mini"
              },
              "openai_api_base": {
                "_input_type": "StrInput",
                "advanced": true,
                "display_name": "OpenAI API Base",
                "dynamic": false,
                "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "openai_api_base",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "https://api.vsegpt.ru/v1"
              },
              "seed": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Seed",
                "dynamic": false,
                "info": "The seed controls the reproducibility of the job.",
                "list": false,
                "list_add_label": "Add More",
                "name": "seed",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 1
              },
              "stream": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Stream",
                "dynamic": false,
                "info": "Stream the response from the model. Streaming works only in Chat.",
                "list": false,
                "list_add_label": "Add More",
                "name": "stream",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "system_message": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "copy_field": false,
                "display_name": "System Message",
                "dynamic": false,
                "info": "System message to pass to the model.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "system_message",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "temperature": {
                "_input_type": "SliderInput",
                "advanced": false,
                "display_name": "Temperature",
                "dynamic": false,
                "info": "",
                "max_label": "",
                "max_label_icon": "",
                "min_label": "",
                "min_label_icon": "",
                "name": "temperature",
                "placeholder": "",
                "range_spec": {
                  "max": 1,
                  "min": 0,
                  "step": 0.01,
                  "step_type": "float"
                },
                "required": false,
                "show": true,
                "slider_buttons": false,
                "slider_buttons_options": [],
                "slider_input": false,
                "title_case": false,
                "tool_mode": false,
                "type": "slider",
                "value": 0.1
              },
              "timeout": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Timeout",
                "dynamic": false,
                "info": "The timeout for requests to OpenAI completion API.",
                "list": false,
                "list_add_label": "Add More",
                "name": "timeout",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 700
              }
            },
            "tool_mode": false
          },
          "selected_output": "model_output",
          "showNode": true,
          "type": "OpenAIModel"
        },
        "dragging": false,
        "id": "OpenAIModel-REaI9",
        "measured": {
          "height": 537,
          "width": 320
        },
        "position": {
          "x": 1786.059512967196,
          "y": -367.9792403777252
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "CalculatorComponent-cSjHW",
          "node": {
            "base_classes": [
              "Data"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Log a new activity event. Trigger this tool when the user indicates they are currently engaged in an activity or have just started one.",
            "display_name": "TK New Activity",
            "documentation": "",
            "edited": true,
            "field_order": [
              "new_activity",
              "new_activity_offset"
            ],
            "frozen": false,
            "icon": "Radio",
            "last_updated": "2025-07-22T05:02:32.992Z",
            "legacy": false,
            "lf_version": "1.5.0.post1",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Toolset",
                "group_outputs": false,
                "hidden": null,
                "method": "to_toolkit",
                "name": "component_as_tool",
                "options": null,
                "required_inputs": null,
                "selected": "Tool",
                "tool_mode": true,
                "types": [
                  "Tool"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from datetime import datetime, timedelta\r\n\r\nfrom langflow.custom import Component\r\nfrom langflow.inputs import MessageTextInput\r\nfrom langflow.io import Output\r\nfrom langflow.schema import Data\r\n\r\n\r\nclass TKNewActivityComponent(Component):\r\n    display_name = \"TK New Activity\"\r\n    description = \"Log a new activity event. Trigger this tool when the user indicates they are currently engaged in an activity or have just started one.\"\r\n    icon = \"Radio\"\r\n\r\n    inputs = [\r\n        MessageTextInput(\r\n            name=\"new_activity\",\r\n            display_name=\"Activity\",\r\n            info=\"Name of the started activity. Should be short, precise, and sound natural to a human — like a familiar, conventional label for the activity. Avoid synonyms, verb forms, or uncommon phrasings.\",\r\n            tool_mode=True,\r\n        ),\r\n        MessageTextInput(\r\n            name=\"new_activity_offset\",\r\n            display_name=\"Activity Offset\",\r\n            info=\"Time since activity started (optional). Provide this only if the user explicitly mentioned how long ago the activity began. The value must be in the %H:%M:%S format — for example: \\\"00:10:45\\\" (10 minutes and 45 seconds ago).\",\r\n            tool_mode=True,\r\n            required=False,\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Data\", name=\"result\", type_=Data, method=\"write_new_activity\"),\r\n    ]\r\n\r\n    def write_new_activity(self) -> Data:\r\n        response = f\"я записал, что начал активность '{self.new_activity}'\"\r\n\r\n        if self.new_activity_offset:\r\n            dt_offset = datetime.strptime(self.new_activity_offset, \"%H:%M:%S\")\r\n            delta = timedelta(hours=dt_offset.hour, minutes=dt_offset.minute, seconds=dt_offset.second)\r\n            delta_minutes = delta.seconds / 60\r\n            response += f\" {delta_minutes:.2f} минут назад\"\r\n\r\n        return Data(data={\"result\": response})\r\n\r\n    def build(self):\r\n        return self.write_new_activity\r\n"
              },
              "new_activity": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Activity",
                "dynamic": false,
                "info": "Name of the started activity. Should be short, precise, and sound natural to a human — like a familiar, conventional label for the activity. Avoid synonyms, verb forms, or uncommon phrasings.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "new_activity",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "new_activity_offset": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Activity Offset",
                "dynamic": false,
                "info": "Time since activity started (optional). Provide this only if the user explicitly mentioned how long ago the activity began. The value must be in the %H:%M:%S format — for example: \"00:10:45\" (10 minutes and 45 seconds ago).",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "new_activity_offset",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "tools_metadata": {
                "_input_type": "ToolsInput",
                "advanced": false,
                "display_name": "Actions",
                "dynamic": false,
                "info": "Modify tool names and descriptions to help agents understand when to use each tool.",
                "is_list": true,
                "list_add_label": "Add More",
                "name": "tools_metadata",
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "tools",
                "value": [
                  {
                    "args": {
                      "new_activity": {
                        "default": "",
                        "description": "Name of the started activity. Should be short, precise, and sound natural to a human — like a familiar, conventional label for the activity. Avoid synonyms, verb forms, or uncommon phrasings.",
                        "title": "New Activity",
                        "type": "string"
                      },
                      "new_activity_offset": {
                        "default": "",
                        "description": "Time since activity started (optional). Provide this only if the user explicitly mentioned how long ago the activity began. The value must be in the %H:%M:%S format — for example: \"00:10:45\" (10 minutes and 45 seconds ago).",
                        "title": "New Activity Offset",
                        "type": "string"
                      }
                    },
                    "description": "Log a new activity event. Trigger this tool when the user indicates they are currently engaged in an activity or have just started one.",
                    "display_description": "Log a new activity event. Trigger this tool when the user indicates they are currently engaged in an activity or have just started one.",
                    "display_name": "write_new_activity",
                    "name": "write_new_activity",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "write_new_activity"
                    ]
                  }
                ]
              }
            },
            "tool_mode": true
          },
          "showNode": true,
          "type": "TKNewActivityComponent"
        },
        "dragging": false,
        "id": "CalculatorComponent-cSjHW",
        "measured": {
          "height": 233,
          "width": 320
        },
        "position": {
          "x": 1250.886280820189,
          "y": 913.4813611369567
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "CurrentDate-FXcJ7",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Returns the current date and time in the selected timezone.",
            "display_name": "Current Date",
            "documentation": "https://docs.langflow.org/components-helpers#current-date",
            "edited": false,
            "field_order": [
              "timezone"
            ],
            "frozen": false,
            "icon": "clock",
            "last_updated": "2025-07-22T05:02:32.994Z",
            "legacy": false,
            "lf_version": "1.5.0.post1",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Toolset",
                "group_outputs": false,
                "hidden": null,
                "method": "to_toolkit",
                "name": "component_as_tool",
                "options": null,
                "required_inputs": null,
                "selected": "Tool",
                "tool_mode": true,
                "types": [
                  "Tool"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from datetime import datetime\nfrom zoneinfo import ZoneInfo, available_timezones\n\nfrom loguru import logger\n\nfrom langflow.custom.custom_component.component import Component\nfrom langflow.io import DropdownInput, Output\nfrom langflow.schema.message import Message\n\n\nclass CurrentDateComponent(Component):\n    display_name = \"Current Date\"\n    description = \"Returns the current date and time in the selected timezone.\"\n    documentation: str = \"https://docs.langflow.org/components-helpers#current-date\"\n    icon = \"clock\"\n    name = \"CurrentDate\"\n\n    inputs = [\n        DropdownInput(\n            name=\"timezone\",\n            display_name=\"Timezone\",\n            options=list(available_timezones()),\n            value=\"UTC\",\n            info=\"Select the timezone for the current date and time.\",\n            tool_mode=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Current Date\", name=\"current_date\", method=\"get_current_date\"),\n    ]\n\n    def get_current_date(self) -> Message:\n        try:\n            tz = ZoneInfo(self.timezone)\n            current_date = datetime.now(tz).strftime(\"%Y-%m-%d %H:%M:%S %Z\")\n            result = f\"Current date and time in {self.timezone}: {current_date}\"\n            self.status = result\n            return Message(text=result)\n        except Exception as e:  # noqa: BLE001\n            logger.opt(exception=True).debug(\"Error getting current date\")\n            error_message = f\"Error: {e}\"\n            self.status = error_message\n            return Message(text=error_message)\n"
              },
              "timezone": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Timezone",
                "dynamic": false,
                "info": "Select the timezone for the current date and time.",
                "name": "timezone",
                "options": [
                  "Libya",
                  "Pacific/Enderbury",
                  "Navajo",
                  "Pacific/Fiji",
                  "Pacific/Chuuk",
                  "Europe/Bratislava",
                  "America/St_Thomas",
                  "Asia/Novosibirsk",
                  "Japan",
                  "Australia/Brisbane",
                  "America/Matamoros",
                  "Pacific/Niue",
                  "EST",
                  "Asia/Nicosia",
                  "Antarctica/South_Pole",
                  "America/Creston",
                  "Asia/Kuwait",
                  "Asia/Baku",
                  "Indian/Mauritius",
                  "America/Caracas",
                  "Africa/Lome",
                  "America/Guyana",
                  "Europe/Tallinn",
                  "America/Virgin",
                  "Arctic/Longyearbyen",
                  "Asia/Riyadh",
                  "Etc/GMT+12",
                  "Etc/GMT-6",
                  "America/Indiana/Vincennes",
                  "Asia/Khandyga",
                  "Asia/Bahrain",
                  "America/Porto_Acre",
                  "US/Michigan",
                  "Europe/Skopje",
                  "America/Indiana/Vevay",
                  "America/Cordoba",
                  "GMT+0",
                  "America/Pangnirtung",
                  "America/North_Dakota/New_Salem",
                  "WET",
                  "America/Aruba",
                  "Africa/Nairobi",
                  "Asia/Vladivostok",
                  "Europe/Kiev",
                  "Pacific/Kosrae",
                  "Pacific/Tongatapu",
                  "Asia/Karachi",
                  "Asia/Dacca",
                  "America/Grenada",
                  "America/Cambridge_Bay",
                  "Asia/Novokuznetsk",
                  "Australia/West",
                  "America/Argentina/Ushuaia",
                  "Africa/Juba",
                  "Pacific/Yap",
                  "Portugal",
                  "US/Mountain",
                  "America/Yellowknife",
                  "America/Managua",
                  "America/Swift_Current",
                  "Australia/North",
                  "Europe/Jersey",
                  "Africa/Bujumbura",
                  "Europe/Copenhagen",
                  "Africa/Khartoum",
                  "America/Argentina/Catamarca",
                  "Indian/Maldives",
                  "Asia/Chungking",
                  "Europe/Helsinki",
                  "NZ",
                  "Europe/Oslo",
                  "America/Tegucigalpa",
                  "Asia/Tomsk",
                  "America/Juneau",
                  "America/Nome",
                  "Pacific/Wallis",
                  "Africa/Abidjan",
                  "Asia/Istanbul",
                  "America/Montserrat",
                  "Asia/Sakhalin",
                  "Pacific/Funafuti",
                  "Indian/Antananarivo",
                  "Europe/Istanbul",
                  "Europe/Bucharest",
                  "Africa/Ouagadougou",
                  "Atlantic/Madeira",
                  "America/Mexico_City",
                  "Europe/Malta",
                  "NZ-CHAT",
                  "America/Monterrey",
                  "Pacific/Johnston",
                  "America/Moncton",
                  "Asia/Ho_Chi_Minh",
                  "Europe/Zaporozhye",
                  "America/Kentucky/Louisville",
                  "Kwajalein",
                  "Africa/Malabo",
                  "Africa/Lagos",
                  "Asia/Qatar",
                  "America/Port_of_Spain",
                  "Asia/Bangkok",
                  "Europe/Paris",
                  "Pacific/Pago_Pago",
                  "Mexico/BajaSur",
                  "Antarctica/Troll",
                  "America/Santarem",
                  "America/Argentina/San_Luis",
                  "Africa/Libreville",
                  "America/Argentina/Rio_Gallegos",
                  "America/Indiana/Petersburg",
                  "Europe/Lisbon",
                  "Africa/Asmara",
                  "America/Bogota",
                  "America/Ensenada",
                  "Africa/Tunis",
                  "Zulu",
                  "America/Coral_Harbour",
                  "W-SU",
                  "Pacific/Saipan",
                  "Pacific/Nauru",
                  "America/Metlakatla",
                  "America/Iqaluit",
                  "America/Lower_Princes",
                  "Indian/Comoro",
                  "America/Whitehorse",
                  "Pacific/Kanton",
                  "America/Santa_Isabel",
                  "Etc/GMT+4",
                  "America/Louisville",
                  "Europe/Simferopol",
                  "America/New_York",
                  "America/Recife",
                  "Asia/Yakutsk",
                  "Australia/Yancowinna",
                  "US/Arizona",
                  "Asia/Rangoon",
                  "US/Aleutian",
                  "Europe/Vatican",
                  "America/Thunder_Bay",
                  "Asia/Katmandu",
                  "Australia/Victoria",
                  "America/Inuvik",
                  "Etc/GMT+3",
                  "Etc/UTC",
                  "Australia/Hobart",
                  "Asia/Hebron",
                  "America/Cayenne",
                  "Africa/Bissau",
                  "America/Blanc-Sablon",
                  "Israel",
                  "America/Phoenix",
                  "Greenwich",
                  "Indian/Chagos",
                  "Europe/Samara",
                  "America/La_Paz",
                  "US/Alaska",
                  "Asia/Dushanbe",
                  "Europe/Saratov",
                  "Asia/Aqtobe",
                  "Europe/Luxembourg",
                  "America/Bahia",
                  "Turkey",
                  "Asia/Choibalsan",
                  "Brazil/East",
                  "Etc/GMT-0",
                  "Canada/Central",
                  "Africa/Sao_Tome",
                  "MET",
                  "Africa/Addis_Ababa",
                  "America/Dominica",
                  "America/Argentina/La_Rioja",
                  "America/Denver",
                  "Asia/Ust-Nera",
                  "America/Boise",
                  "Asia/Yangon",
                  "Canada/Eastern",
                  "America/Godthab",
                  "America/Guadeloupe",
                  "America/Porto_Velho",
                  "America/Knox_IN",
                  "GMT",
                  "America/Adak",
                  "America/Indiana/Tell_City",
                  "Asia/Macao",
                  "Europe/Gibraltar",
                  "America/Guatemala",
                  "America/Havana",
                  "America/Kralendijk",
                  "Europe/Kirov",
                  "America/Paramaribo",
                  "America/Belem",
                  "Antarctica/Davis",
                  "ROK",
                  "Asia/Macau",
                  "America/Danmarkshavn",
                  "GB-Eire",
                  "Europe/Belgrade",
                  "UTC",
                  "Asia/Aqtau",
                  "Pacific/Pohnpei",
                  "Etc/GMT-11",
                  "Australia/Queensland",
                  "Africa/Ndjamena",
                  "Africa/Douala",
                  "Etc/GMT-5",
                  "Hongkong",
                  "America/St_Lucia",
                  "America/Kentucky/Monticello",
                  "America/Port-au-Prince",
                  "Etc/Greenwich",
                  "Jamaica",
                  "America/Nipigon",
                  "Africa/Maseru",
                  "Africa/Kampala",
                  "Africa/Bangui",
                  "CST6CDT",
                  "Indian/Mahe",
                  "Asia/Anadyr",
                  "Asia/Dili",
                  "Europe/Dublin",
                  "America/Sitka",
                  "Pacific/Efate",
                  "Asia/Srednekolymsk",
                  "America/Rio_Branco",
                  "Asia/Kabul",
                  "Europe/London",
                  "Asia/Yerevan",
                  "America/Barbados",
                  "Asia/Colombo",
                  "America/Campo_Grande",
                  "Asia/Bishkek",
                  "Africa/Kinshasa",
                  "Pacific/Ponape",
                  "Asia/Pyongyang",
                  "Africa/Bamako",
                  "America/Martinique",
                  "Africa/Lusaka",
                  "Etc/GMT-4",
                  "America/St_Vincent",
                  "Europe/Prague",
                  "Africa/El_Aaiun",
                  "America/Maceio",
                  "Pacific/Easter",
                  "Etc/GMT-3",
                  "Asia/Muscat",
                  "Australia/Currie",
                  "Etc/GMT-10",
                  "Asia/Hovd",
                  "Europe/Kyiv",
                  "America/Antigua",
                  "America/Regina",
                  "Asia/Vientiane",
                  "Antarctica/Mawson",
                  "America/Miquelon",
                  "Iceland",
                  "Poland",
                  "Europe/Budapest",
                  "Australia/Darwin",
                  "Europe/Amsterdam",
                  "America/Rankin_Inlet",
                  "Africa/Luanda",
                  "Atlantic/Canary",
                  "Asia/Krasnoyarsk",
                  "Singapore",
                  "Europe/Belfast",
                  "Etc/GMT-9",
                  "Canada/Yukon",
                  "Iran",
                  "Africa/Blantyre",
                  "Asia/Barnaul",
                  "America/Punta_Arenas",
                  "Asia/Kolkata",
                  "Pacific/Guadalcanal",
                  "America/Sao_Paulo",
                  "Pacific/Kiritimati",
                  "EST5EDT",
                  "Asia/Kuala_Lumpur",
                  "Europe/Tiraspol",
                  "Asia/Chongqing",
                  "Europe/Chisinau",
                  "Asia/Kuching",
                  "Pacific/Tarawa",
                  "America/Argentina/Jujuy",
                  "Africa/Casablanca",
                  "Asia/Tel_Aviv",
                  "America/Manaus",
                  "Pacific/Midway",
                  "America/Halifax",
                  "Africa/Porto-Novo",
                  "America/Argentina/San_Juan",
                  "America/St_Johns",
                  "America/St_Kitts",
                  "Asia/Brunei",
                  "Asia/Oral",
                  "America/Rosario",
                  "America/Cayman",
                  "Asia/Gaza",
                  "Africa/Cairo",
                  "Asia/Urumqi",
                  "Atlantic/Stanley",
                  "Antarctica/Syowa",
                  "America/Anchorage",
                  "Atlantic/Azores",
                  "America/Noronha",
                  "Australia/ACT",
                  "America/Argentina/Buenos_Aires",
                  "Eire",
                  "Pacific/Marquesas",
                  "Australia/LHI",
                  "America/Indiana/Indianapolis",
                  "Europe/Busingen",
                  "Atlantic/Faroe",
                  "Africa/Windhoek",
                  "America/St_Barthelemy",
                  "Etc/GMT-1",
                  "Canada/Pacific",
                  "Chile/EasterIsland",
                  "Africa/Harare",
                  "Pacific/Truk",
                  "America/Yakutat",
                  "America/Grand_Turk",
                  "Asia/Dubai",
                  "Europe/Vilnius",
                  "America/Asuncion",
                  "Asia/Irkutsk",
                  "Etc/GMT-7",
                  "America/Argentina/Cordoba",
                  "Africa/Dar_es_Salaam",
                  "Asia/Beirut",
                  "Africa/Timbuktu",
                  "America/Araguaina",
                  "Indian/Kerguelen",
                  "America/Argentina/Salta",
                  "US/Hawaii",
                  "Europe/Andorra",
                  "America/Ciudad_Juarez",
                  "America/Shiprock",
                  "America/Mendoza",
                  "America/Indiana/Knox",
                  "America/Buenos_Aires",
                  "Atlantic/Jan_Mayen",
                  "America/Los_Angeles",
                  "Europe/Vienna",
                  "Pacific/Kwajalein",
                  "Asia/Chita",
                  "Asia/Ulaanbaatar",
                  "Europe/Volgograd",
                  "Antarctica/Vostok",
                  "America/Bahia_Banderas",
                  "Asia/Ashkhabad",
                  "Pacific/Port_Moresby",
                  "Pacific/Gambier",
                  "Pacific/Samoa",
                  "America/Vancouver",
                  "Africa/Asmera",
                  "America/Eirunepe",
                  "Asia/Saigon",
                  "MST7MDT",
                  "America/Indianapolis",
                  "America/Lima",
                  "Canada/Newfoundland",
                  "Etc/GMT+0",
                  "America/Detroit",
                  "Etc/GMT-13",
                  "America/Nassau",
                  "Asia/Jakarta",
                  "US/Samoa",
                  "Asia/Shanghai",
                  "Asia/Kathmandu",
                  "Asia/Calcutta",
                  "Africa/Monrovia",
                  "Asia/Atyrau",
                  "Etc/GMT0",
                  "Europe/Moscow",
                  "America/Scoresbysund",
                  "Australia/Melbourne",
                  "America/Jamaica",
                  "Australia/Lord_Howe",
                  "America/Indiana/Winamac",
                  "America/Argentina/Mendoza",
                  "Etc/GMT+10",
                  "Pacific/Fakaofo",
                  "Asia/Thimphu",
                  "Australia/NSW",
                  "Europe/Zurich",
                  "America/Marigot",
                  "America/Goose_Bay",
                  "Pacific/Guam",
                  "America/Argentina/ComodRivadavia",
                  "Australia/Canberra",
                  "America/Guayaquil",
                  "America/Atikokan",
                  "Asia/Tehran",
                  "Asia/Phnom_Penh",
                  "America/Santiago",
                  "Asia/Magadan",
                  "Asia/Omsk",
                  "Asia/Ulan_Bator",
                  "Mexico/BajaNorte",
                  "America/Menominee",
                  "Australia/Adelaide",
                  "HST",
                  "America/Anguilla",
                  "Etc/GMT+5",
                  "Brazil/DeNoronha",
                  "America/Chicago",
                  "Indian/Christmas",
                  "Pacific/Pitcairn",
                  "Europe/Zagreb",
                  "Etc/GMT",
                  "Europe/Podgorica",
                  "America/North_Dakota/Center",
                  "Etc/UCT",
                  "America/Fort_Nelson",
                  "Australia/Perth",
                  "Pacific/Galapagos",
                  "Asia/Pontianak",
                  "America/Montreal",
                  "Asia/Kashgar",
                  "Antarctica/Rothera",
                  "America/Edmonton",
                  "Etc/GMT-8",
                  "Asia/Jayapura",
                  "Atlantic/St_Helena",
                  "Antarctica/Macquarie",
                  "Europe/Tirane",
                  "Etc/GMT+11",
                  "Europe/Madrid",
                  "America/Boa_Vista",
                  "Asia/Ujung_Pandang",
                  "Canada/Mountain",
                  "Europe/Sofia",
                  "Pacific/Palau",
                  "GB",
                  "Antarctica/Palmer",
                  "Asia/Aden",
                  "Pacific/Tahiti",
                  "America/Dawson_Creek",
                  "Pacific/Rarotonga",
                  "US/Indiana-Starke",
                  "Etc/GMT+7",
                  "Africa/Freetown",
                  "EET",
                  "Asia/Taipei",
                  "Europe/Minsk",
                  "Atlantic/South_Georgia",
                  "Etc/GMT+2",
                  "MST",
                  "Etc/GMT+8",
                  "Africa/Brazzaville",
                  "Asia/Yekaterinburg",
                  "Canada/Atlantic",
                  "America/Chihuahua",
                  "Australia/Sydney",
                  "Asia/Famagusta",
                  "Australia/Broken_Hill",
                  "UCT",
                  "Africa/Conakry",
                  "Australia/Tasmania",
                  "Africa/Maputo",
                  "ROC",
                  "Europe/Riga",
                  "Etc/Universal",
                  "America/Nuuk",
                  "Africa/Johannesburg",
                  "Europe/Mariehamn",
                  "Africa/Algiers",
                  "America/Fortaleza",
                  "Etc/GMT+6",
                  "Africa/Mbabane",
                  "Africa/Ceuta",
                  "Asia/Amman",
                  "Atlantic/Bermuda",
                  "Mexico/General",
                  "Europe/Sarajevo",
                  "Asia/Tashkent",
                  "America/Panama",
                  "Africa/Mogadishu",
                  "Europe/Stockholm",
                  "localtime",
                  "Europe/Warsaw",
                  "Indian/Cocos",
                  "Asia/Almaty",
                  "US/Central",
                  "America/El_Salvador",
                  "America/Fort_Wayne",
                  "Europe/Vaduz",
                  "Africa/Dakar",
                  "Europe/Berlin",
                  "America/Tortola",
                  "Africa/Kigali",
                  "Pacific/Auckland",
                  "Universal",
                  "America/Indiana/Marengo",
                  "Europe/Isle_of_Man",
                  "Europe/Monaco",
                  "Africa/Nouakchott",
                  "Atlantic/Reykjavik",
                  "Pacific/Bougainville",
                  "America/Belize",
                  "Africa/Gaborone",
                  "Asia/Ashgabat",
                  "Asia/Makassar",
                  "Pacific/Noumea",
                  "America/Thule",
                  "Brazil/Acre",
                  "Asia/Hong_Kong",
                  "Asia/Harbin",
                  "Asia/Qyzylorda",
                  "Asia/Seoul",
                  "Asia/Tokyo",
                  "America/Dawson",
                  "US/East-Indiana",
                  "Europe/Athens",
                  "Asia/Tbilisi",
                  "Australia/South",
                  "Europe/Uzhgorod",
                  "Africa/Lubumbashi",
                  "Europe/Ljubljana",
                  "America/Montevideo",
                  "Asia/Baghdad",
                  "Europe/Nicosia",
                  "Pacific/Apia",
                  "America/Toronto",
                  "Europe/Brussels",
                  "Africa/Accra",
                  "Asia/Manila",
                  "America/Winnipeg",
                  "Canada/Saskatchewan",
                  "America/Coyhaique",
                  "Etc/Zulu",
                  "US/Eastern",
                  "America/Merida",
                  "Pacific/Honolulu",
                  "Asia/Thimbu",
                  "Atlantic/Faeroe",
                  "America/Glace_Bay",
                  "Europe/Rome",
                  "Asia/Kamchatka",
                  "Cuba",
                  "Africa/Niamey",
                  "Asia/Singapore",
                  "Australia/Lindeman",
                  "GMT-0",
                  "Europe/Ulyanovsk",
                  "Australia/Eucla",
                  "America/Catamarca",
                  "Indian/Mayotte",
                  "US/Pacific",
                  "America/Mazatlan",
                  "America/Puerto_Rico",
                  "Atlantic/Cape_Verde",
                  "Europe/Astrakhan",
                  "GMT0",
                  "Asia/Qostanay",
                  "Etc/GMT-12",
                  "Pacific/Chatham",
                  "Etc/GMT-2",
                  "America/Rainy_River",
                  "Asia/Dhaka",
                  "PST8PDT",
                  "America/Costa_Rica",
                  "America/Santo_Domingo",
                  "Europe/Guernsey",
                  "PRC",
                  "Indian/Reunion",
                  "Africa/Tripoli",
                  "America/North_Dakota/Beulah",
                  "Asia/Damascus",
                  "Pacific/Wake",
                  "Egypt",
                  "Antarctica/Casey",
                  "America/Curacao",
                  "Europe/Kaliningrad",
                  "CET",
                  "Brazil/West",
                  "Antarctica/McMurdo",
                  "Pacific/Majuro",
                  "America/Cuiaba",
                  "Etc/GMT-14",
                  "America/Resolute",
                  "America/Argentina/Tucuman",
                  "Etc/GMT+9",
                  "Chile/Continental",
                  "Asia/Samarkand",
                  "Asia/Jerusalem",
                  "America/Tijuana",
                  "Africa/Djibouti",
                  "Antarctica/DumontDUrville",
                  "Europe/San_Marino",
                  "America/Atka",
                  "America/Ojinaga",
                  "America/Jujuy",
                  "Pacific/Norfolk",
                  "America/Cancun",
                  "Etc/GMT+1",
                  "Africa/Banjul",
                  "Factory",
                  "America/Hermosillo"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "UTC"
              },
              "tools_metadata": {
                "_input_type": "ToolsInput",
                "advanced": false,
                "display_name": "Actions",
                "dynamic": false,
                "info": "Modify tool names and descriptions to help agents understand when to use each tool.",
                "is_list": true,
                "list_add_label": "Add More",
                "name": "tools_metadata",
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "tools",
                "value": [
                  {
                    "args": {
                      "timezone": {
                        "default": "UTC",
                        "description": "Select the timezone for the current date and time.",
                        "enum": [
                          "Libya",
                          "Pacific/Enderbury",
                          "Navajo",
                          "Pacific/Fiji",
                          "Pacific/Chuuk",
                          "Europe/Bratislava",
                          "America/St_Thomas",
                          "Asia/Novosibirsk",
                          "Japan",
                          "Australia/Brisbane",
                          "America/Matamoros",
                          "Pacific/Niue",
                          "EST",
                          "Asia/Nicosia",
                          "Antarctica/South_Pole",
                          "America/Creston",
                          "Asia/Kuwait",
                          "Asia/Baku",
                          "Indian/Mauritius",
                          "America/Caracas",
                          "Africa/Lome",
                          "America/Guyana",
                          "Europe/Tallinn",
                          "America/Virgin",
                          "Arctic/Longyearbyen",
                          "Asia/Riyadh",
                          "Etc/GMT+12",
                          "Etc/GMT-6",
                          "America/Indiana/Vincennes",
                          "Asia/Khandyga",
                          "Asia/Bahrain",
                          "America/Porto_Acre",
                          "US/Michigan",
                          "Europe/Skopje",
                          "America/Indiana/Vevay",
                          "America/Cordoba",
                          "GMT+0",
                          "America/Pangnirtung",
                          "America/North_Dakota/New_Salem",
                          "WET",
                          "America/Aruba",
                          "Africa/Nairobi",
                          "Asia/Vladivostok",
                          "Europe/Kiev",
                          "Pacific/Kosrae",
                          "Pacific/Tongatapu",
                          "Asia/Karachi",
                          "Asia/Dacca",
                          "America/Grenada",
                          "America/Cambridge_Bay",
                          "Asia/Novokuznetsk",
                          "Australia/West",
                          "America/Argentina/Ushuaia",
                          "Africa/Juba",
                          "Pacific/Yap",
                          "Portugal",
                          "US/Mountain",
                          "America/Yellowknife",
                          "America/Managua",
                          "America/Swift_Current",
                          "Australia/North",
                          "Europe/Jersey",
                          "Africa/Bujumbura",
                          "Europe/Copenhagen",
                          "Africa/Khartoum",
                          "America/Argentina/Catamarca",
                          "Indian/Maldives",
                          "Asia/Chungking",
                          "Europe/Helsinki",
                          "NZ",
                          "Europe/Oslo",
                          "America/Tegucigalpa",
                          "Asia/Tomsk",
                          "America/Juneau",
                          "America/Nome",
                          "Pacific/Wallis",
                          "Africa/Abidjan",
                          "Asia/Istanbul",
                          "America/Montserrat",
                          "Asia/Sakhalin",
                          "Pacific/Funafuti",
                          "Indian/Antananarivo",
                          "Europe/Istanbul",
                          "Europe/Bucharest",
                          "Africa/Ouagadougou",
                          "Atlantic/Madeira",
                          "America/Mexico_City",
                          "Europe/Malta",
                          "NZ-CHAT",
                          "America/Monterrey",
                          "Pacific/Johnston",
                          "America/Moncton",
                          "Asia/Ho_Chi_Minh",
                          "Europe/Zaporozhye",
                          "America/Kentucky/Louisville",
                          "Kwajalein",
                          "Africa/Malabo",
                          "Africa/Lagos",
                          "Asia/Qatar",
                          "America/Port_of_Spain",
                          "Asia/Bangkok",
                          "Europe/Paris",
                          "Pacific/Pago_Pago",
                          "Mexico/BajaSur",
                          "Antarctica/Troll",
                          "America/Santarem",
                          "America/Argentina/San_Luis",
                          "Africa/Libreville",
                          "America/Argentina/Rio_Gallegos",
                          "America/Indiana/Petersburg",
                          "Europe/Lisbon",
                          "Africa/Asmara",
                          "America/Bogota",
                          "America/Ensenada",
                          "Africa/Tunis",
                          "Zulu",
                          "America/Coral_Harbour",
                          "W-SU",
                          "Pacific/Saipan",
                          "Pacific/Nauru",
                          "America/Metlakatla",
                          "America/Iqaluit",
                          "America/Lower_Princes",
                          "Indian/Comoro",
                          "America/Whitehorse",
                          "Pacific/Kanton",
                          "America/Santa_Isabel",
                          "Etc/GMT+4",
                          "America/Louisville",
                          "Europe/Simferopol",
                          "America/New_York",
                          "America/Recife",
                          "Asia/Yakutsk",
                          "Australia/Yancowinna",
                          "US/Arizona",
                          "Asia/Rangoon",
                          "US/Aleutian",
                          "Europe/Vatican",
                          "America/Thunder_Bay",
                          "Asia/Katmandu",
                          "Australia/Victoria",
                          "America/Inuvik",
                          "Etc/GMT+3",
                          "Etc/UTC",
                          "Australia/Hobart",
                          "Asia/Hebron",
                          "America/Cayenne",
                          "Africa/Bissau",
                          "America/Blanc-Sablon",
                          "Israel",
                          "America/Phoenix",
                          "Greenwich",
                          "Indian/Chagos",
                          "Europe/Samara",
                          "America/La_Paz",
                          "US/Alaska",
                          "Asia/Dushanbe",
                          "Europe/Saratov",
                          "Asia/Aqtobe",
                          "Europe/Luxembourg",
                          "America/Bahia",
                          "Turkey",
                          "Asia/Choibalsan",
                          "Brazil/East",
                          "Etc/GMT-0",
                          "Canada/Central",
                          "Africa/Sao_Tome",
                          "MET",
                          "Africa/Addis_Ababa",
                          "America/Dominica",
                          "America/Argentina/La_Rioja",
                          "America/Denver",
                          "Asia/Ust-Nera",
                          "America/Boise",
                          "Asia/Yangon",
                          "Canada/Eastern",
                          "America/Godthab",
                          "America/Guadeloupe",
                          "America/Porto_Velho",
                          "America/Knox_IN",
                          "GMT",
                          "America/Adak",
                          "America/Indiana/Tell_City",
                          "Asia/Macao",
                          "Europe/Gibraltar",
                          "America/Guatemala",
                          "America/Havana",
                          "America/Kralendijk",
                          "Europe/Kirov",
                          "America/Paramaribo",
                          "America/Belem",
                          "Antarctica/Davis",
                          "ROK",
                          "Asia/Macau",
                          "America/Danmarkshavn",
                          "GB-Eire",
                          "Europe/Belgrade",
                          "UTC",
                          "Asia/Aqtau",
                          "Pacific/Pohnpei",
                          "Etc/GMT-11",
                          "Australia/Queensland",
                          "Africa/Ndjamena",
                          "Africa/Douala",
                          "Etc/GMT-5",
                          "Hongkong",
                          "America/St_Lucia",
                          "America/Kentucky/Monticello",
                          "America/Port-au-Prince",
                          "Etc/Greenwich",
                          "Jamaica",
                          "America/Nipigon",
                          "Africa/Maseru",
                          "Africa/Kampala",
                          "Africa/Bangui",
                          "CST6CDT",
                          "Indian/Mahe",
                          "Asia/Anadyr",
                          "Asia/Dili",
                          "Europe/Dublin",
                          "America/Sitka",
                          "Pacific/Efate",
                          "Asia/Srednekolymsk",
                          "America/Rio_Branco",
                          "Asia/Kabul",
                          "Europe/London",
                          "Asia/Yerevan",
                          "America/Barbados",
                          "Asia/Colombo",
                          "America/Campo_Grande",
                          "Asia/Bishkek",
                          "Africa/Kinshasa",
                          "Pacific/Ponape",
                          "Asia/Pyongyang",
                          "Africa/Bamako",
                          "America/Martinique",
                          "Africa/Lusaka",
                          "Etc/GMT-4",
                          "America/St_Vincent",
                          "Europe/Prague",
                          "Africa/El_Aaiun",
                          "America/Maceio",
                          "Pacific/Easter",
                          "Etc/GMT-3",
                          "Asia/Muscat",
                          "Australia/Currie",
                          "Etc/GMT-10",
                          "Asia/Hovd",
                          "Europe/Kyiv",
                          "America/Antigua",
                          "America/Regina",
                          "Asia/Vientiane",
                          "Antarctica/Mawson",
                          "America/Miquelon",
                          "Iceland",
                          "Poland",
                          "Europe/Budapest",
                          "Australia/Darwin",
                          "Europe/Amsterdam",
                          "America/Rankin_Inlet",
                          "Africa/Luanda",
                          "Atlantic/Canary",
                          "Asia/Krasnoyarsk",
                          "Singapore",
                          "Europe/Belfast",
                          "Etc/GMT-9",
                          "Canada/Yukon",
                          "Iran",
                          "Africa/Blantyre",
                          "Asia/Barnaul",
                          "America/Punta_Arenas",
                          "Asia/Kolkata",
                          "Pacific/Guadalcanal",
                          "America/Sao_Paulo",
                          "Pacific/Kiritimati",
                          "EST5EDT",
                          "Asia/Kuala_Lumpur",
                          "Europe/Tiraspol",
                          "Asia/Chongqing",
                          "Europe/Chisinau",
                          "Asia/Kuching",
                          "Pacific/Tarawa",
                          "America/Argentina/Jujuy",
                          "Africa/Casablanca",
                          "Asia/Tel_Aviv",
                          "America/Manaus",
                          "Pacific/Midway",
                          "America/Halifax",
                          "Africa/Porto-Novo",
                          "America/Argentina/San_Juan",
                          "America/St_Johns",
                          "America/St_Kitts",
                          "Asia/Brunei",
                          "Asia/Oral",
                          "America/Rosario",
                          "America/Cayman",
                          "Asia/Gaza",
                          "Africa/Cairo",
                          "Asia/Urumqi",
                          "Atlantic/Stanley",
                          "Antarctica/Syowa",
                          "America/Anchorage",
                          "Atlantic/Azores",
                          "America/Noronha",
                          "Australia/ACT",
                          "America/Argentina/Buenos_Aires",
                          "Eire",
                          "Pacific/Marquesas",
                          "Australia/LHI",
                          "America/Indiana/Indianapolis",
                          "Europe/Busingen",
                          "Atlantic/Faroe",
                          "Africa/Windhoek",
                          "America/St_Barthelemy",
                          "Etc/GMT-1",
                          "Canada/Pacific",
                          "Chile/EasterIsland",
                          "Africa/Harare",
                          "Pacific/Truk",
                          "America/Yakutat",
                          "America/Grand_Turk",
                          "Asia/Dubai",
                          "Europe/Vilnius",
                          "America/Asuncion",
                          "Asia/Irkutsk",
                          "Etc/GMT-7",
                          "America/Argentina/Cordoba",
                          "Africa/Dar_es_Salaam",
                          "Asia/Beirut",
                          "Africa/Timbuktu",
                          "America/Araguaina",
                          "Indian/Kerguelen",
                          "America/Argentina/Salta",
                          "US/Hawaii",
                          "Europe/Andorra",
                          "America/Ciudad_Juarez",
                          "America/Shiprock",
                          "America/Mendoza",
                          "America/Indiana/Knox",
                          "America/Buenos_Aires",
                          "Atlantic/Jan_Mayen",
                          "America/Los_Angeles",
                          "Europe/Vienna",
                          "Pacific/Kwajalein",
                          "Asia/Chita",
                          "Asia/Ulaanbaatar",
                          "Europe/Volgograd",
                          "Antarctica/Vostok",
                          "America/Bahia_Banderas",
                          "Asia/Ashkhabad",
                          "Pacific/Port_Moresby",
                          "Pacific/Gambier",
                          "Pacific/Samoa",
                          "America/Vancouver",
                          "Africa/Asmera",
                          "America/Eirunepe",
                          "Asia/Saigon",
                          "MST7MDT",
                          "America/Indianapolis",
                          "America/Lima",
                          "Canada/Newfoundland",
                          "Etc/GMT+0",
                          "America/Detroit",
                          "Etc/GMT-13",
                          "America/Nassau",
                          "Asia/Jakarta",
                          "US/Samoa",
                          "Asia/Shanghai",
                          "Asia/Kathmandu",
                          "Asia/Calcutta",
                          "Africa/Monrovia",
                          "Asia/Atyrau",
                          "Etc/GMT0",
                          "Europe/Moscow",
                          "America/Scoresbysund",
                          "Australia/Melbourne",
                          "America/Jamaica",
                          "Australia/Lord_Howe",
                          "America/Indiana/Winamac",
                          "America/Argentina/Mendoza",
                          "Etc/GMT+10",
                          "Pacific/Fakaofo",
                          "Asia/Thimphu",
                          "Australia/NSW",
                          "Europe/Zurich",
                          "America/Marigot",
                          "America/Goose_Bay",
                          "Pacific/Guam",
                          "America/Argentina/ComodRivadavia",
                          "Australia/Canberra",
                          "America/Guayaquil",
                          "America/Atikokan",
                          "Asia/Tehran",
                          "Asia/Phnom_Penh",
                          "America/Santiago",
                          "Asia/Magadan",
                          "Asia/Omsk",
                          "Asia/Ulan_Bator",
                          "Mexico/BajaNorte",
                          "America/Menominee",
                          "Australia/Adelaide",
                          "HST",
                          "America/Anguilla",
                          "Etc/GMT+5",
                          "Brazil/DeNoronha",
                          "America/Chicago",
                          "Indian/Christmas",
                          "Pacific/Pitcairn",
                          "Europe/Zagreb",
                          "Etc/GMT",
                          "Europe/Podgorica",
                          "America/North_Dakota/Center",
                          "Etc/UCT",
                          "America/Fort_Nelson",
                          "Australia/Perth",
                          "Pacific/Galapagos",
                          "Asia/Pontianak",
                          "America/Montreal",
                          "Asia/Kashgar",
                          "Antarctica/Rothera",
                          "America/Edmonton",
                          "Etc/GMT-8",
                          "Asia/Jayapura",
                          "Atlantic/St_Helena",
                          "Antarctica/Macquarie",
                          "Europe/Tirane",
                          "Etc/GMT+11",
                          "Europe/Madrid",
                          "America/Boa_Vista",
                          "Asia/Ujung_Pandang",
                          "Canada/Mountain",
                          "Europe/Sofia",
                          "Pacific/Palau",
                          "GB",
                          "Antarctica/Palmer",
                          "Asia/Aden",
                          "Pacific/Tahiti",
                          "America/Dawson_Creek",
                          "Pacific/Rarotonga",
                          "US/Indiana-Starke",
                          "Etc/GMT+7",
                          "Africa/Freetown",
                          "EET",
                          "Asia/Taipei",
                          "Europe/Minsk",
                          "Atlantic/South_Georgia",
                          "Etc/GMT+2",
                          "MST",
                          "Etc/GMT+8",
                          "Africa/Brazzaville",
                          "Asia/Yekaterinburg",
                          "Canada/Atlantic",
                          "America/Chihuahua",
                          "Australia/Sydney",
                          "Asia/Famagusta",
                          "Australia/Broken_Hill",
                          "UCT",
                          "Africa/Conakry",
                          "Australia/Tasmania",
                          "Africa/Maputo",
                          "ROC",
                          "Europe/Riga",
                          "Etc/Universal",
                          "America/Nuuk",
                          "Africa/Johannesburg",
                          "Europe/Mariehamn",
                          "Africa/Algiers",
                          "America/Fortaleza",
                          "Etc/GMT+6",
                          "Africa/Mbabane",
                          "Africa/Ceuta",
                          "Asia/Amman",
                          "Atlantic/Bermuda",
                          "Mexico/General",
                          "Europe/Sarajevo",
                          "Asia/Tashkent",
                          "America/Panama",
                          "Africa/Mogadishu",
                          "Europe/Stockholm",
                          "localtime",
                          "Europe/Warsaw",
                          "Indian/Cocos",
                          "Asia/Almaty",
                          "US/Central",
                          "America/El_Salvador",
                          "America/Fort_Wayne",
                          "Europe/Vaduz",
                          "Africa/Dakar",
                          "Europe/Berlin",
                          "America/Tortola",
                          "Africa/Kigali",
                          "Pacific/Auckland",
                          "Universal",
                          "America/Indiana/Marengo",
                          "Europe/Isle_of_Man",
                          "Europe/Monaco",
                          "Africa/Nouakchott",
                          "Atlantic/Reykjavik",
                          "Pacific/Bougainville",
                          "America/Belize",
                          "Africa/Gaborone",
                          "Asia/Ashgabat",
                          "Asia/Makassar",
                          "Pacific/Noumea",
                          "America/Thule",
                          "Brazil/Acre",
                          "Asia/Hong_Kong",
                          "Asia/Harbin",
                          "Asia/Qyzylorda",
                          "Asia/Seoul",
                          "Asia/Tokyo",
                          "America/Dawson",
                          "US/East-Indiana",
                          "Europe/Athens",
                          "Asia/Tbilisi",
                          "Australia/South",
                          "Europe/Uzhgorod",
                          "Africa/Lubumbashi",
                          "Europe/Ljubljana",
                          "America/Montevideo",
                          "Asia/Baghdad",
                          "Europe/Nicosia",
                          "Pacific/Apia",
                          "America/Toronto",
                          "Europe/Brussels",
                          "Africa/Accra",
                          "Asia/Manila",
                          "America/Winnipeg",
                          "Canada/Saskatchewan",
                          "America/Coyhaique",
                          "Etc/Zulu",
                          "US/Eastern",
                          "America/Merida",
                          "Pacific/Honolulu",
                          "Asia/Thimbu",
                          "Atlantic/Faeroe",
                          "America/Glace_Bay",
                          "Europe/Rome",
                          "Asia/Kamchatka",
                          "Cuba",
                          "Africa/Niamey",
                          "Asia/Singapore",
                          "Australia/Lindeman",
                          "GMT-0",
                          "Europe/Ulyanovsk",
                          "Australia/Eucla",
                          "America/Catamarca",
                          "Indian/Mayotte",
                          "US/Pacific",
                          "America/Mazatlan",
                          "America/Puerto_Rico",
                          "Atlantic/Cape_Verde",
                          "Europe/Astrakhan",
                          "GMT0",
                          "Asia/Qostanay",
                          "Etc/GMT-12",
                          "Pacific/Chatham",
                          "Etc/GMT-2",
                          "America/Rainy_River",
                          "Asia/Dhaka",
                          "PST8PDT",
                          "America/Costa_Rica",
                          "America/Santo_Domingo",
                          "Europe/Guernsey",
                          "PRC",
                          "Indian/Reunion",
                          "Africa/Tripoli",
                          "America/North_Dakota/Beulah",
                          "Asia/Damascus",
                          "Pacific/Wake",
                          "Egypt",
                          "Antarctica/Casey",
                          "America/Curacao",
                          "Europe/Kaliningrad",
                          "CET",
                          "Brazil/West",
                          "Antarctica/McMurdo",
                          "Pacific/Majuro",
                          "America/Cuiaba",
                          "Etc/GMT-14",
                          "America/Resolute",
                          "America/Argentina/Tucuman",
                          "Etc/GMT+9",
                          "Chile/Continental",
                          "Asia/Samarkand",
                          "Asia/Jerusalem",
                          "America/Tijuana",
                          "Africa/Djibouti",
                          "Antarctica/DumontDUrville",
                          "Europe/San_Marino",
                          "America/Atka",
                          "America/Ojinaga",
                          "America/Jujuy",
                          "Pacific/Norfolk",
                          "America/Cancun",
                          "Etc/GMT+1",
                          "Africa/Banjul",
                          "Factory",
                          "America/Hermosillo"
                        ],
                        "title": "Timezone",
                        "type": "string"
                      }
                    },
                    "description": "Returns the current date and time in the selected timezone.",
                    "display_description": "Returns the current date and time in the selected timezone.",
                    "display_name": "get_current_date",
                    "name": "get_current_date",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "get_current_date"
                    ]
                  }
                ]
              }
            },
            "tool_mode": true
          },
          "showNode": true,
          "type": "CurrentDate"
        },
        "dragging": false,
        "id": "CurrentDate-FXcJ7",
        "measured": {
          "height": 217,
          "width": 320
        },
        "position": {
          "x": 1249.2913875743457,
          "y": 619.6685212097294
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "TKNewActivityComponent-9apOk",
          "node": {
            "base_classes": [
              "Data"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Log an activity event that ended. Use this tool only if the user has stated that an activity is finished AND has NOT mentioned being currently engaged in another activity or just starting one.",
            "display_name": "TK Old Activity",
            "documentation": "",
            "edited": true,
            "field_order": [
              "old_activity_offset"
            ],
            "frozen": false,
            "icon": "Radio",
            "last_updated": "2025-07-22T05:02:32.998Z",
            "legacy": false,
            "lf_version": "1.5.0.post1",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Toolset",
                "group_outputs": false,
                "hidden": null,
                "method": "to_toolkit",
                "name": "component_as_tool",
                "options": null,
                "required_inputs": null,
                "selected": "Tool",
                "tool_mode": true,
                "types": [
                  "Tool"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from datetime import datetime, timedelta\r\n\r\nfrom langflow.custom import Component\r\nfrom langflow.inputs import MessageTextInput\r\nfrom langflow.io import Output\r\nfrom langflow.schema import Data\r\n\r\n\r\nclass TKOldActivityComponent(Component):\r\n    display_name = \"TK Old Activity\"\r\n    description = \"Log an activity event that ended. Use this tool only if the user has stated that an activity is finished AND has NOT mentioned being currently engaged in another activity or just starting one.\"\r\n    icon = \"Radio\"\r\n\r\n    inputs = [\r\n        MessageTextInput(\r\n            name=\"old_activity_offset\",\r\n            display_name=\"Activity Offset\",\r\n            info=\"Time since activity ended (optional). Provide this only if the user explicitly mentioned how long ago the activity ended. The value must be in the %H:%M:%S format — for example: \\\"00:10:45\\\" (10 minutes and 45 seconds ago).\",\r\n            tool_mode=True,\r\n            required=False,\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Data\", name=\"result\", type_=Data, method=\"write_old_activity\"),\r\n    ]\r\n\r\n    def write_old_activity(self) -> Data:\r\n        response = f\"я записал, что закончил активность\"\r\n\r\n        dt_offset = datetime.strptime(self.old_activity_offset or \"00:00:00\", \"%H:%M:%S\")\r\n        delta = timedelta(hours=dt_offset.hour, minutes=dt_offset.minute, seconds=dt_offset.second)\r\n        delta_minutes = delta.seconds / 60\r\n\r\n        if delta_minutes:\r\n            response += f\" {delta_minutes:.2f} минут назад\"\r\n\r\n        return Data(data={\"result\": response})\r\n\r\n    def build(self):\r\n        return self.write_old_activity\r\n"
              },
              "old_activity_offset": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Activity Offset",
                "dynamic": false,
                "info": "Time since activity ended (optional). Provide this only if the user explicitly mentioned how long ago the activity ended. The value must be in the %H:%M:%S format — for example: \"00:10:45\" (10 minutes and 45 seconds ago).",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "old_activity_offset",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "tools_metadata": {
                "_input_type": "ToolsInput",
                "advanced": false,
                "display_name": "Actions",
                "dynamic": false,
                "info": "Modify tool names and descriptions to help agents understand when to use each tool.",
                "is_list": true,
                "list_add_label": "Add More",
                "name": "tools_metadata",
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "tools",
                "value": [
                  {
                    "args": {
                      "old_activity_offset": {
                        "default": "",
                        "description": "Time since activity ended (optional). Provide this only if the user explicitly mentioned how long ago the activity ended. The value must be in the %H:%M:%S format — for example: \"00:10:45\" (10 minutes and 45 seconds ago).",
                        "title": "Old Activity Offset",
                        "type": "string"
                      }
                    },
                    "description": "Log an activity event that ended. Use this tool only if the user has stated that an activity is finished AND has NOT mentioned being currently engaged in another activity or just starting one.",
                    "display_description": "Log an activity event that ended. Use this tool only if the user has stated that an activity is finished AND has NOT mentioned being currently engaged in another activity or just starting one.",
                    "display_name": "write_old_activity",
                    "name": "write_old_activity",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "write_old_activity"
                    ]
                  }
                ]
              }
            },
            "tool_mode": true
          },
          "showNode": true,
          "type": "TKOldActivityComponent"
        },
        "dragging": false,
        "id": "TKNewActivityComponent-9apOk",
        "measured": {
          "height": 249,
          "width": 320
        },
        "position": {
          "x": 1241.8574955160557,
          "y": 1244.204427956083
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "ComposioGoogleCalendarAPIComponent-Ag3Si",
          "node": {
            "base_classes": [
              "DataFrame"
            ],
            "beta": false,
            "category": "composio",
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Google Calendar API",
            "display_name": "Google Calendar",
            "documentation": "https://docs.composio.dev",
            "edited": false,
            "field_order": [
              "entity_id",
              "api_key",
              "auth_link",
              "action",
              "GOOGLECALENDAR_LIST_CALENDARS_max_results",
              "GOOGLECALENDAR_LIST_CALENDARS_min_access_role",
              "GOOGLECALENDAR_LIST_CALENDARS_page_token",
              "GOOGLECALENDAR_LIST_CALENDARS_show_deleted",
              "GOOGLECALENDAR_LIST_CALENDARS_show_hidden",
              "GOOGLECALENDAR_LIST_CALENDARS_sync_token",
              "GOOGLECALENDAR_FIND_EVENT_calendar_id",
              "GOOGLECALENDAR_FIND_EVENT_query",
              "GOOGLECALENDAR_FIND_EVENT_max_results",
              "GOOGLECALENDAR_FIND_EVENT_order_by",
              "GOOGLECALENDAR_FIND_EVENT_show_deleted",
              "GOOGLECALENDAR_FIND_EVENT_single_events",
              "GOOGLECALENDAR_FIND_EVENT_timeMax",
              "GOOGLECALENDAR_FIND_EVENT_timeMin",
              "GOOGLECALENDAR_FIND_EVENT_updated_min",
              "GOOGLECALENDAR_FIND_EVENT_event_types",
              "GOOGLECALENDAR_FIND_EVENT_page_token",
              "GOOGLECALENDAR_DUPLICATE_CALENDAR_summary",
              "GOOGLECALENDAR_REMOVE_ATTENDEE_calendar_id",
              "GOOGLECALENDAR_REMOVE_ATTENDEE_event_id",
              "GOOGLECALENDAR_REMOVE_ATTENDEE_attendee_email",
              "GOOGLECALENDAR_GET_CALENDAR_calendar_id",
              "GOOGLECALENDAR_CREATE_EVENT_description",
              "GOOGLECALENDAR_CREATE_EVENT_eventType",
              "GOOGLECALENDAR_CREATE_EVENT_create_meeting_room",
              "GOOGLECALENDAR_CREATE_EVENT_guestsCanSeeOtherGuests",
              "GOOGLECALENDAR_CREATE_EVENT_guestsCanInviteOthers",
              "GOOGLECALENDAR_CREATE_EVENT_location",
              "GOOGLECALENDAR_CREATE_EVENT_summary",
              "GOOGLECALENDAR_CREATE_EVENT_transparency",
              "GOOGLECALENDAR_CREATE_EVENT_visibility",
              "GOOGLECALENDAR_CREATE_EVENT_timezone",
              "GOOGLECALENDAR_CREATE_EVENT_recurrence",
              "GOOGLECALENDAR_CREATE_EVENT_guests_can_modify",
              "GOOGLECALENDAR_CREATE_EVENT_attendees",
              "GOOGLECALENDAR_CREATE_EVENT_send_updates",
              "GOOGLECALENDAR_CREATE_EVENT_start_datetime",
              "GOOGLECALENDAR_CREATE_EVENT_event_duration_hour",
              "GOOGLECALENDAR_CREATE_EVENT_event_duration_minutes",
              "GOOGLECALENDAR_CREATE_EVENT_calendar_id",
              "GOOGLECALENDAR_DELETE_EVENT_calendar_id",
              "GOOGLECALENDAR_DELETE_EVENT_event_id",
              "GOOGLECALENDAR_FIND_FREE_SLOTS_time_min",
              "GOOGLECALENDAR_FIND_FREE_SLOTS_time_max",
              "GOOGLECALENDAR_FIND_FREE_SLOTS_timezone",
              "GOOGLECALENDAR_FIND_FREE_SLOTS_group_expansion_max",
              "GOOGLECALENDAR_FIND_FREE_SLOTS_calendar_expansion_max",
              "GOOGLECALENDAR_FIND_FREE_SLOTS_items",
              "GOOGLECALENDAR_QUICK_ADD_calendar_id",
              "GOOGLECALENDAR_QUICK_ADD_text",
              "GOOGLECALENDAR_QUICK_ADD_send_updates",
              "GOOGLECALENDAR_PATCH_CALENDAR_calendar_id",
              "GOOGLECALENDAR_PATCH_CALENDAR_description",
              "GOOGLECALENDAR_PATCH_CALENDAR_location",
              "GOOGLECALENDAR_PATCH_CALENDAR_summary",
              "GOOGLECALENDAR_PATCH_CALENDAR_timezone",
              "GOOGLECALENDAR_GET_CURRENT_DATE_TIME_timezone",
              "GOOGLECALENDAR_UPDATE_EVENT_description",
              "GOOGLECALENDAR_UPDATE_EVENT_eventType",
              "GOOGLECALENDAR_UPDATE_EVENT_create_meeting_room",
              "GOOGLECALENDAR_UPDATE_EVENT_guestsCanSeeOtherGuests",
              "GOOGLECALENDAR_UPDATE_EVENT_guestsCanInviteOthers",
              "GOOGLECALENDAR_UPDATE_EVENT_location",
              "GOOGLECALENDAR_UPDATE_EVENT_summary",
              "GOOGLECALENDAR_UPDATE_EVENT_transparency",
              "GOOGLECALENDAR_UPDATE_EVENT_visibility",
              "GOOGLECALENDAR_UPDATE_EVENT_timezone",
              "GOOGLECALENDAR_UPDATE_EVENT_recurrence",
              "GOOGLECALENDAR_UPDATE_EVENT_guests_can_modify",
              "GOOGLECALENDAR_UPDATE_EVENT_attendees",
              "GOOGLECALENDAR_UPDATE_EVENT_send_updates",
              "GOOGLECALENDAR_UPDATE_EVENT_start_datetime",
              "GOOGLECALENDAR_UPDATE_EVENT_event_duration_hour",
              "GOOGLECALENDAR_UPDATE_EVENT_event_duration_minutes",
              "GOOGLECALENDAR_UPDATE_EVENT_calendar_id",
              "GOOGLECALENDAR_UPDATE_EVENT_event_id"
            ],
            "frozen": false,
            "icon": "Googlecalendar",
            "key": "ComposioGoogleCalendarAPIComponent",
            "last_updated": "2025-07-22T06:19:12.695Z",
            "legacy": false,
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Toolset",
                "group_outputs": false,
                "hidden": null,
                "method": "to_toolkit",
                "name": "component_as_tool",
                "options": null,
                "required_inputs": null,
                "selected": "Tool",
                "tool_mode": true,
                "types": [
                  "Tool"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "score": 0.03289318164829356,
            "template": {
              "GOOGLECALENDAR_CREATE_EVENT_attendees": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Attendees",
                "dynamic": false,
                "info": "List of attendee emails (strings).",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_CREATE_EVENT_attendees",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_CREATE_EVENT_calendar_id": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Calendar Id",
                "dynamic": false,
                "info": "The ID of the Google Calendar. `primary` for interacting with the primary calendar.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_CREATE_EVENT_calendar_id",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_CREATE_EVENT_create_meeting_room": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Create Meeting Room",
                "dynamic": false,
                "info": "If true, a Google Meet link is created and added to the event.",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_CREATE_EVENT_create_meeting_room",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "GOOGLECALENDAR_CREATE_EVENT_description": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Description",
                "dynamic": false,
                "info": "Description of the event. Can contain HTML. Optional.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_CREATE_EVENT_description",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_CREATE_EVENT_eventType": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Event Type",
                "dynamic": false,
                "info": "Type of the event, immutable post-creation. Currently, only 'default'",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_CREATE_EVENT_eventType",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_CREATE_EVENT_event_duration_hour": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Event Duration Hour",
                "dynamic": false,
                "info": "Number of hours (0-24).",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_CREATE_EVENT_event_duration_hour",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": ""
              },
              "GOOGLECALENDAR_CREATE_EVENT_event_duration_minutes": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Event Duration Minutes",
                "dynamic": false,
                "info": "Number of minutes (0-59).",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_CREATE_EVENT_event_duration_minutes",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": ""
              },
              "GOOGLECALENDAR_CREATE_EVENT_guestsCanInviteOthers": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Guests Can Invite Others",
                "dynamic": false,
                "info": "Whether attendees other than the organizer can invite others to the event.",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_CREATE_EVENT_guestsCanInviteOthers",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "GOOGLECALENDAR_CREATE_EVENT_guestsCanSeeOtherGuests": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Guests Can See Other Guests",
                "dynamic": false,
                "info": "Whether attendees other than the organizer can see who the event's attendees are.",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_CREATE_EVENT_guestsCanSeeOtherGuests",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "GOOGLECALENDAR_CREATE_EVENT_guests_can_modify": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Guests Can Modify",
                "dynamic": false,
                "info": "If True, guests can modify the event.",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_CREATE_EVENT_guests_can_modify",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "GOOGLECALENDAR_CREATE_EVENT_location": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Location",
                "dynamic": false,
                "info": "Geographic location of the event as free-form text.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_CREATE_EVENT_location",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_CREATE_EVENT_recurrence": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Recurrence",
                "dynamic": false,
                "info": "List of RRULE, EXRULE, RDATE, EXDATE lines for recurring events.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_CREATE_EVENT_recurrence",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_CREATE_EVENT_send_updates": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Send Updates",
                "dynamic": false,
                "info": "Defaults to True. Whether to send updates to the attendees.",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_CREATE_EVENT_send_updates",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "GOOGLECALENDAR_CREATE_EVENT_start_datetime": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Start Datetime",
                "dynamic": false,
                "info": "Naive date/time (YYYY-MM-DDTHH:MM:SS) with NO offsets or Z. e.g. '2025-01-16T13:00:00'",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_CREATE_EVENT_start_datetime",
                "placeholder": "",
                "required": true,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_CREATE_EVENT_summary": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Summary/Title",
                "dynamic": false,
                "info": "Summary (title) of the event.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_CREATE_EVENT_summary",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_CREATE_EVENT_timezone": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Timezone",
                "dynamic": false,
                "info": "IANA timezone name (e.g., 'America/New_York'). Required if datetime is naive. If datetime includes timezone info (Z or offset), this field is optional and defaults to UTC.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_CREATE_EVENT_timezone",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_CREATE_EVENT_transparency": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Event Transparency",
                "dynamic": false,
                "info": "'opaque' (busy) or 'transparent' (available).",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_CREATE_EVENT_transparency",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_CREATE_EVENT_visibility": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Event Visibility",
                "dynamic": false,
                "info": "Event visibility: 'default', 'public', 'private', or 'confidential'.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_CREATE_EVENT_visibility",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_DELETE_EVENT_calendar_id": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Calendar Id",
                "dynamic": false,
                "info": "ID of the Google Calendar",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_DELETE_EVENT_calendar_id",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_DELETE_EVENT_event_id": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Event Id",
                "dynamic": false,
                "info": "ID of the event to be deleted",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_DELETE_EVENT_event_id",
                "placeholder": "",
                "required": true,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_DUPLICATE_CALENDAR_summary": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Summary/Title",
                "dynamic": false,
                "info": "Title of the calendar to be duplicated.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_DUPLICATE_CALENDAR_summary",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_FIND_EVENT_calendar_id": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Calendar Id",
                "dynamic": false,
                "info": "Identifier of the Google Calendar. Use 'primary' for the currently logged in user's primary calendar.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_FIND_EVENT_calendar_id",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_FIND_EVENT_event_types": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Event Types",
                "dynamic": false,
                "info": "List of event types to return. Possible values are: default, outOfOffice, focusTime, workingLocation.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_FIND_EVENT_event_types",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_FIND_EVENT_max_results": {
                "_input_type": "IntInput",
                "advanced": false,
                "display_name": "Max Results",
                "dynamic": false,
                "info": "Maximum number of events returned on one result page. The page size can never be larger than 2500 events. The default value is 10.",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_FIND_EVENT_max_results",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": ""
              },
              "GOOGLECALENDAR_FIND_EVENT_order_by": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Order By",
                "dynamic": false,
                "info": "The order of the events returned in the result. Acceptable values are 'startTime' and 'updated'.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_FIND_EVENT_order_by",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_FIND_EVENT_page_token": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Page Token",
                "dynamic": false,
                "info": "Token specifying which result page to return. Optional.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_FIND_EVENT_page_token",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_FIND_EVENT_query": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Query",
                "dynamic": false,
                "info": "Search term to find events that match these terms in the event's summary, description, location, attendee's displayName, attendee's email, organizer's displayName, organizer's email, etc if needed.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_FIND_EVENT_query",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_FIND_EVENT_show_deleted": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Show Deleted",
                "dynamic": false,
                "info": "Whether to include deleted events (with status equals 'cancelled') in the result.",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_FIND_EVENT_show_deleted",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "GOOGLECALENDAR_FIND_EVENT_single_events": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Single Events",
                "dynamic": false,
                "info": "Whether to expand recurring events into instances and only return single one-off events and instances of recurring events, but not the underlying recurring events themselves.",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_FIND_EVENT_single_events",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "GOOGLECALENDAR_FIND_EVENT_timeMax": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Timemax",
                "dynamic": false,
                "info": "Upper bound (exclusive) for an event's start time to filter by. Accepts multiple formats:, 1. ISO format with timezone (e.g., 2024-12-06T13:00:00Z), 2. Comma-separated format (e.g., 2024,12,06,13,00,00), 3. Simple datetime format (e.g., 2024-12-06 13:00:00)",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_FIND_EVENT_timeMax",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_FIND_EVENT_timeMin": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Timemin",
                "dynamic": false,
                "info": "Lower bound (exclusive) for an event's end time to filter by. Accepts multiple formats:, 1. ISO format with timezone (e.g., 2024-12-06T13:00:00Z), 2. Comma-separated format (e.g., 2024,12,06,13,00,00), 3. Simple datetime format (e.g., 2024-12-06 13:00:00)",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_FIND_EVENT_timeMin",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_FIND_EVENT_updated_min": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Updated Min",
                "dynamic": false,
                "info": "Lower bound for an event's last modification time to filter by. Accepts multiple formats:, 1. ISO format with timezone (e.g., 2024-12-06T13:00:00Z), 2. Comma-separated format (e.g., 2024,12,06,13,00,00), 3. Simple datetime format (e.g., 2024-12-06 13:00:00)",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_FIND_EVENT_updated_min",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_FIND_FREE_SLOTS_calendar_expansion_max": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Calendar Expansion Max",
                "dynamic": false,
                "info": "Maximal number of calendars for which FreeBusy information is to be provided. Optional. Maximum value is 50.",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_FIND_FREE_SLOTS_calendar_expansion_max",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": ""
              },
              "GOOGLECALENDAR_FIND_FREE_SLOTS_group_expansion_max": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Group Expansion Max",
                "dynamic": false,
                "info": "Maximal number of calendar identifiers to be provided for a single group. Optional. An error is returned for a group with more members than this value. Maximum value is 100.",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_FIND_FREE_SLOTS_group_expansion_max",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": ""
              },
              "GOOGLECALENDAR_FIND_FREE_SLOTS_items": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Items",
                "dynamic": false,
                "info": "List of calendars ids for which to fetch",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_FIND_FREE_SLOTS_items",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_FIND_FREE_SLOTS_time_max": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Time Max",
                "dynamic": false,
                "info": "The end datetime of the interval for the query. Supports multiple formats:, 1. ISO format with timezone (e.g., 2024-12-06T13:00:00Z), 2. Comma-separated format (e.g., 2024,12,06,13,00,00), 3. Simple datetime format (e.g., 2024-12-06 13:00:00)",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_FIND_FREE_SLOTS_time_max",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_FIND_FREE_SLOTS_time_min": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Time Min",
                "dynamic": false,
                "info": "The start datetime of the interval for the query. Supports multiple formats:, 1. ISO format with timezone (e.g., 2024-12-06T13:00:00Z), 2. Comma-separated format (e.g., 2024,12,06,13,00,00), 3. Simple datetime format (e.g., 2024-12-06 13:00:00)",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_FIND_FREE_SLOTS_time_min",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_FIND_FREE_SLOTS_timezone": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Timezone",
                "dynamic": false,
                "info": "Time zone used in the response. Optional. The default is UTC.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_FIND_FREE_SLOTS_timezone",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_GET_CALENDAR_calendar_id": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Calendar Id",
                "dynamic": false,
                "info": "The ID of the Google Calendar that needs to be fetched. Default is 'primary'.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_GET_CALENDAR_calendar_id",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_GET_CURRENT_DATE_TIME_timezone": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Timezone",
                "dynamic": false,
                "info": "The timezone offset from UTC to retrieve current date and time, like for location of UTC+6, you give 6, for UTC -9, your give -9.",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_GET_CURRENT_DATE_TIME_timezone",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": ""
              },
              "GOOGLECALENDAR_LIST_CALENDARS_max_results": {
                "_input_type": "IntInput",
                "advanced": false,
                "display_name": "Max Results",
                "dynamic": false,
                "info": "Maximum number of entries returned on one result page. The page size can never be larger than 250 entries.",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_LIST_CALENDARS_max_results",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": ""
              },
              "GOOGLECALENDAR_LIST_CALENDARS_min_access_role": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Min Access Role",
                "dynamic": false,
                "info": "The minimum access role for the user in the returned entries. Accepted values are 'owner' & 'reader'",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_LIST_CALENDARS_min_access_role",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_LIST_CALENDARS_page_token": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Page Token",
                "dynamic": false,
                "info": "Token specifying which result page to return.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_LIST_CALENDARS_page_token",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_LIST_CALENDARS_show_deleted": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Show Deleted",
                "dynamic": false,
                "info": "Whether to include deleted calendar list entries in the result.",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_LIST_CALENDARS_show_deleted",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "GOOGLECALENDAR_LIST_CALENDARS_show_hidden": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Show Hidden",
                "dynamic": false,
                "info": "Whether to show hidden entries.",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_LIST_CALENDARS_show_hidden",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "GOOGLECALENDAR_LIST_CALENDARS_sync_token": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Sync Token",
                "dynamic": false,
                "info": "Token obtained from the nextSyncToken field returned on the last page of results from the previous list request.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_LIST_CALENDARS_sync_token",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_PATCH_CALENDAR_calendar_id": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Calendar Id",
                "dynamic": false,
                "info": "The ID of the Google Calendar that needs to be updated.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_PATCH_CALENDAR_calendar_id",
                "placeholder": "",
                "required": true,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_PATCH_CALENDAR_description": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Description",
                "dynamic": false,
                "info": "Description of the calendar. Optional.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_PATCH_CALENDAR_description",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_PATCH_CALENDAR_location": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Location",
                "dynamic": false,
                "info": "Geographic location of the calendar as free-form text.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_PATCH_CALENDAR_location",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_PATCH_CALENDAR_summary": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Title/Summary",
                "dynamic": false,
                "info": "Title of the calendar. This field is required and cannot be left blank as per the Google Calendar API requirements.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_PATCH_CALENDAR_summary",
                "placeholder": "",
                "required": true,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_PATCH_CALENDAR_timezone": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Timezone",
                "dynamic": false,
                "info": "The time zone of the calendar. (Formatted as an IANA Time Zone Database name, e.g. 'Europe/Zurich').",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_PATCH_CALENDAR_timezone",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_QUICK_ADD_calendar_id": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Calendar Id",
                "dynamic": false,
                "info": "Calendar identifier. To list calendars to retrieve calendar IDs use relevant tools. To access the primary calendar of the currently logged in user, use the 'primary' keyword.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_QUICK_ADD_calendar_id",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_QUICK_ADD_send_updates": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Send Updates",
                "dynamic": false,
                "info": "Guests who should receive notifications about the creation of the new event. Accepted fields include 'all', 'none', 'externalOnly'",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_QUICK_ADD_send_updates",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_QUICK_ADD_text": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Text",
                "dynamic": false,
                "info": "The text describing the event to be created.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_QUICK_ADD_text",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_REMOVE_ATTENDEE_attendee_email": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Attendee Email",
                "dynamic": false,
                "info": "Email address of the attendee to be removed",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_REMOVE_ATTENDEE_attendee_email",
                "placeholder": "",
                "required": true,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_REMOVE_ATTENDEE_calendar_id": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Calendar Id",
                "dynamic": false,
                "info": "ID of the Google Calendar",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_REMOVE_ATTENDEE_calendar_id",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_REMOVE_ATTENDEE_event_id": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Event Id",
                "dynamic": false,
                "info": "ID of the event",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_REMOVE_ATTENDEE_event_id",
                "placeholder": "",
                "required": true,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_UPDATE_EVENT_attendees": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Attendees",
                "dynamic": false,
                "info": "List of attendee emails (strings).",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_UPDATE_EVENT_attendees",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_UPDATE_EVENT_calendar_id": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Calendar Id",
                "dynamic": false,
                "info": "ID of the Google Calendar",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_UPDATE_EVENT_calendar_id",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_UPDATE_EVENT_create_meeting_room": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Create Meeting Room",
                "dynamic": false,
                "info": "If true, a Google Meet link is created and added to the event.",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_UPDATE_EVENT_create_meeting_room",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "GOOGLECALENDAR_UPDATE_EVENT_description": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Description",
                "dynamic": false,
                "info": "Description of the event. Can contain HTML. Optional.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_UPDATE_EVENT_description",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_UPDATE_EVENT_eventType": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "EventType",
                "dynamic": false,
                "info": "Type of the event, immutable post-creation. Currently, only 'default' and 'workingLocation' can be created.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_UPDATE_EVENT_eventType",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_UPDATE_EVENT_event_duration_hour": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Event Duration Hour",
                "dynamic": false,
                "info": "Number of hours (0-24).",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_UPDATE_EVENT_event_duration_hour",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": ""
              },
              "GOOGLECALENDAR_UPDATE_EVENT_event_duration_minutes": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Event Duration Minutes",
                "dynamic": false,
                "info": "Number of minutes (0-59).",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_UPDATE_EVENT_event_duration_minutes",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": ""
              },
              "GOOGLECALENDAR_UPDATE_EVENT_event_id": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Event Id",
                "dynamic": false,
                "info": "ID of the event to be updated",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_UPDATE_EVENT_event_id",
                "placeholder": "",
                "required": true,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_UPDATE_EVENT_guestsCanInviteOthers": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Guests Can Invite Others",
                "dynamic": false,
                "info": "Whether attendees other than the organizer can invite others to the event.",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_UPDATE_EVENT_guestsCanInviteOthers",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "GOOGLECALENDAR_UPDATE_EVENT_guestsCanSeeOtherGuests": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Guests Can See Other Guests",
                "dynamic": false,
                "info": "Whether attendees other than the organizer can see who the event's attendees are.",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_UPDATE_EVENT_guestsCanSeeOtherGuests",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "GOOGLECALENDAR_UPDATE_EVENT_guests_can_modify": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Guests Can Modify",
                "dynamic": false,
                "info": "If True, guests can modify the event.",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_UPDATE_EVENT_guests_can_modify",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "GOOGLECALENDAR_UPDATE_EVENT_location": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Location",
                "dynamic": false,
                "info": "Geographic location of the event as free-form text.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_UPDATE_EVENT_location",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_UPDATE_EVENT_recurrence": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Recurrence",
                "dynamic": false,
                "info": "List of RRULE, EXRULE, RDATE, EXDATE lines for recurring events.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_UPDATE_EVENT_recurrence",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_UPDATE_EVENT_send_updates": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Send Updates",
                "dynamic": false,
                "info": "Defaults to True. Whether to send updates to the attendees.",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_UPDATE_EVENT_send_updates",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "GOOGLECALENDAR_UPDATE_EVENT_start_datetime": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Start Datetime",
                "dynamic": false,
                "info": "Naive date/time (YYYY-MM-DDTHH:MM:SS) with NO offsets or Z. e.g. '2025-01-16T13:00:00'",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_UPDATE_EVENT_start_datetime",
                "placeholder": "",
                "required": true,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_UPDATE_EVENT_summary": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Summary/Title",
                "dynamic": false,
                "info": "Summary (title) of the event.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_UPDATE_EVENT_summary",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_UPDATE_EVENT_timezone": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Timezone",
                "dynamic": false,
                "info": "IANA timezone name (e.g., 'America/New_York'). Required if datetime is naive. If datetime includes timezone info (Z or offset), this field is optional and defaults to UTC.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_UPDATE_EVENT_timezone",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_UPDATE_EVENT_transparency": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Event Transparency",
                "dynamic": false,
                "info": "'opaque' (busy) or 'transparent' (available).",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_UPDATE_EVENT_transparency",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_UPDATE_EVENT_visibility": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Event Visibility",
                "dynamic": false,
                "info": "Event visibility: 'default', 'public', 'private', or 'confidential'.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_UPDATE_EVENT_visibility",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "_type": "Component",
              "action": {
                "_input_type": "SortableListInput",
                "advanced": false,
                "display_name": "Action",
                "dynamic": false,
                "helper_text": null,
                "helper_text_metadata": {},
                "info": "",
                "limit": 1,
                "name": "action",
                "options": [
                  {
                    "metadata": "GOOGLECALENDAR_UPDATE_EVENT",
                    "name": "Update Google Event"
                  },
                  {
                    "metadata": "GOOGLECALENDAR_REMOVE_ATTENDEE",
                    "name": "Remove Attendee From Event"
                  },
                  {
                    "metadata": "GOOGLECALENDAR_GET_CURRENT_DATE_TIME",
                    "name": "Get Current Date And Time"
                  },
                  {
                    "metadata": "GOOGLECALENDAR_QUICK_ADD",
                    "name": "Quick Add Event"
                  },
                  {
                    "metadata": "GOOGLECALENDAR_LIST_CALENDARS",
                    "name": "List Google Calendars"
                  },
                  {
                    "metadata": "GOOGLECALENDAR_FIND_EVENT",
                    "name": "Find Event"
                  },
                  {
                    "metadata": "GOOGLECALENDAR_CREATE_EVENT",
                    "name": "Create Event"
                  },
                  {
                    "metadata": "GOOGLECALENDAR_FIND_FREE_SLOTS",
                    "name": "Find Free Slots"
                  },
                  {
                    "metadata": "GOOGLECALENDAR_PATCH_CALENDAR",
                    "name": "Patch Calendar"
                  },
                  {
                    "metadata": "GOOGLECALENDAR_GET_CALENDAR",
                    "name": "Fetch Google Calendar"
                  },
                  {
                    "metadata": "GOOGLECALENDAR_DELETE_EVENT",
                    "name": "Delete Event"
                  },
                  {
                    "metadata": "GOOGLECALENDAR_DUPLICATE_CALENDAR",
                    "name": "Duplicate Calendar"
                  }
                ],
                "placeholder": "Select action",
                "real_time_refresh": true,
                "required": false,
                "search_category": [],
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "sortableList",
                "value": []
              },
              "api_key": {
                "_input_type": "SecretStrInput",
                "advanced": false,
                "display_name": "Composio API Key",
                "dynamic": false,
                "info": "",
                "input_types": [],
                "load_from_db": false,
                "name": "api_key",
                "password": true,
                "placeholder": "",
                "real_time_refresh": true,
                "required": true,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "auth_link": {
                "_input_type": "AuthInput",
                "advanced": false,
                "auth_tooltip": "Disconnect",
                "dynamic": false,
                "info": "",
                "name": "auth_link",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "auth",
                "value": "validated"
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from typing import Any\n\nfrom composio import Action\n\nfrom langflow.base.composio.composio_base import ComposioBaseComponent\nfrom langflow.inputs import (\n    BoolInput,\n    IntInput,\n    MessageTextInput,\n)\nfrom langflow.logging import logger\n\n\nclass ComposioGoogleCalendarAPIComponent(ComposioBaseComponent):\n    \"\"\"Google Calendar API component for interacting with Google Calendar services.\"\"\"\n\n    display_name: str = \"Google Calendar\"\n    description: str = \"Google Calendar API\"\n    icon = \"Googlecalendar\"\n    documentation: str = \"https://docs.composio.dev\"\n    app_name = \"googlecalendar\"\n\n    _actions_data: dict = {\n        \"GOOGLECALENDAR_UPDATE_EVENT\": {\n            \"display_name\": \"Update Google Event\",\n            \"action_fields\": [\n                \"GOOGLECALENDAR_UPDATE_EVENT_description\",\n                \"GOOGLECALENDAR_UPDATE_EVENT_eventType\",\n                \"GOOGLECALENDAR_UPDATE_EVENT_create_meeting_room\",\n                \"GOOGLECALENDAR_UPDATE_EVENT_guestsCanSeeOtherGuests\",\n                \"GOOGLECALENDAR_UPDATE_EVENT_guestsCanInviteOthers\",\n                \"GOOGLECALENDAR_UPDATE_EVENT_location\",\n                \"GOOGLECALENDAR_UPDATE_EVENT_summary\",\n                \"GOOGLECALENDAR_UPDATE_EVENT_transparency\",\n                \"GOOGLECALENDAR_UPDATE_EVENT_visibility\",\n                \"GOOGLECALENDAR_UPDATE_EVENT_timezone\",\n                \"GOOGLECALENDAR_UPDATE_EVENT_recurrence\",\n                \"GOOGLECALENDAR_UPDATE_EVENT_guests_can_modify\",\n                \"GOOGLECALENDAR_UPDATE_EVENT_attendees\",\n                \"GOOGLECALENDAR_UPDATE_EVENT_send_updates\",\n                \"GOOGLECALENDAR_UPDATE_EVENT_start_datetime\",\n                \"GOOGLECALENDAR_UPDATE_EVENT_event_duration_hour\",\n                \"GOOGLECALENDAR_UPDATE_EVENT_event_duration_minutes\",\n                \"GOOGLECALENDAR_UPDATE_EVENT_calendar_id\",\n                \"GOOGLECALENDAR_UPDATE_EVENT_event_id\",\n            ],\n        },\n        \"GOOGLECALENDAR_REMOVE_ATTENDEE\": {\n            \"display_name\": \"Remove Attendee From Event\",\n            \"action_fields\": [\n                \"GOOGLECALENDAR_REMOVE_ATTENDEE_calendar_id\",\n                \"GOOGLECALENDAR_REMOVE_ATTENDEE_event_id\",\n                \"GOOGLECALENDAR_REMOVE_ATTENDEE_attendee_email\",\n            ],\n        },\n        \"GOOGLECALENDAR_GET_CURRENT_DATE_TIME\": {\n            \"display_name\": \"Get Current Date And Time\",\n            \"action_fields\": [\"GOOGLECALENDAR_GET_CURRENT_DATE_TIME_timezone\"],\n        },\n        \"GOOGLECALENDAR_QUICK_ADD\": {\n            \"display_name\": \"Quick Add Event\",\n            \"action_fields\": [\n                \"GOOGLECALENDAR_QUICK_ADD_calendar_id\",\n                \"GOOGLECALENDAR_QUICK_ADD_text\",\n                \"GOOGLECALENDAR_QUICK_ADD_send_updates\",\n            ],\n        },\n        \"GOOGLECALENDAR_LIST_CALENDARS\": {\n            \"display_name\": \"List Google Calendars\",\n            \"action_fields\": [\n                \"GOOGLECALENDAR_LIST_CALENDARS_max_results\",\n                \"GOOGLECALENDAR_LIST_CALENDARS_min_access_role\",\n                \"GOOGLECALENDAR_LIST_CALENDARS_page_token\",\n                \"GOOGLECALENDAR_LIST_CALENDARS_show_deleted\",\n                \"GOOGLECALENDAR_LIST_CALENDARS_show_hidden\",\n                \"GOOGLECALENDAR_LIST_CALENDARS_sync_token\",\n            ],\n        },\n        \"GOOGLECALENDAR_FIND_EVENT\": {\n            \"display_name\": \"Find Event\",\n            \"action_fields\": [\n                \"GOOGLECALENDAR_FIND_EVENT_calendar_id\",\n                \"GOOGLECALENDAR_FIND_EVENT_query\",\n                \"GOOGLECALENDAR_FIND_EVENT_max_results\",\n                \"GOOGLECALENDAR_FIND_EVENT_order_by\",\n                \"GOOGLECALENDAR_FIND_EVENT_show_deleted\",\n                \"GOOGLECALENDAR_FIND_EVENT_single_events\",\n                \"GOOGLECALENDAR_FIND_EVENT_timeMax\",\n                \"GOOGLECALENDAR_FIND_EVENT_timeMin\",\n                \"GOOGLECALENDAR_FIND_EVENT_updated_min\",\n                \"GOOGLECALENDAR_FIND_EVENT_event_types\",\n                \"GOOGLECALENDAR_FIND_EVENT_page_token\",\n            ],\n        },\n        \"GOOGLECALENDAR_CREATE_EVENT\": {\n            \"display_name\": \"Create Event\",\n            \"action_fields\": [\n                \"GOOGLECALENDAR_CREATE_EVENT_description\",\n                \"GOOGLECALENDAR_CREATE_EVENT_eventType\",\n                \"GOOGLECALENDAR_CREATE_EVENT_create_meeting_room\",\n                \"GOOGLECALENDAR_CREATE_EVENT_guestsCanSeeOtherGuests\",\n                \"GOOGLECALENDAR_CREATE_EVENT_guestsCanInviteOthers\",\n                \"GOOGLECALENDAR_CREATE_EVENT_location\",\n                \"GOOGLECALENDAR_CREATE_EVENT_summary\",\n                \"GOOGLECALENDAR_CREATE_EVENT_transparency\",\n                \"GOOGLECALENDAR_CREATE_EVENT_visibility\",\n                \"GOOGLECALENDAR_CREATE_EVENT_timezone\",\n                \"GOOGLECALENDAR_CREATE_EVENT_recurrence\",\n                \"GOOGLECALENDAR_CREATE_EVENT_guests_can_modify\",\n                \"GOOGLECALENDAR_CREATE_EVENT_attendees\",\n                \"GOOGLECALENDAR_CREATE_EVENT_send_updates\",\n                \"GOOGLECALENDAR_CREATE_EVENT_start_datetime\",\n                \"GOOGLECALENDAR_CREATE_EVENT_event_duration_hour\",\n                \"GOOGLECALENDAR_CREATE_EVENT_event_duration_minutes\",\n                \"GOOGLECALENDAR_CREATE_EVENT_calendar_id\",\n            ],\n        },\n        \"GOOGLECALENDAR_FIND_FREE_SLOTS\": {\n            \"display_name\": \"Find Free Slots\",\n            \"action_fields\": [\n                \"GOOGLECALENDAR_FIND_FREE_SLOTS_time_min\",\n                \"GOOGLECALENDAR_FIND_FREE_SLOTS_time_max\",\n                \"GOOGLECALENDAR_FIND_FREE_SLOTS_timezone\",\n                \"GOOGLECALENDAR_FIND_FREE_SLOTS_group_expansion_max\",\n                \"GOOGLECALENDAR_FIND_FREE_SLOTS_calendar_expansion_max\",\n                \"GOOGLECALENDAR_FIND_FREE_SLOTS_items\",\n            ],\n        },\n        \"GOOGLECALENDAR_PATCH_CALENDAR\": {\n            \"display_name\": \"Patch Calendar\",\n            \"action_fields\": [\n                \"GOOGLECALENDAR_PATCH_CALENDAR_calendar_id\",\n                \"GOOGLECALENDAR_PATCH_CALENDAR_description\",\n                \"GOOGLECALENDAR_PATCH_CALENDAR_location\",\n                \"GOOGLECALENDAR_PATCH_CALENDAR_summary\",\n                \"GOOGLECALENDAR_PATCH_CALENDAR_timezone\",\n            ],\n        },\n        \"GOOGLECALENDAR_GET_CALENDAR\": {\n            \"display_name\": \"Fetch Google Calendar\",\n            \"action_fields\": [\"GOOGLECALENDAR_GET_CALENDAR_calendar_id\"],\n        },\n        \"GOOGLECALENDAR_DELETE_EVENT\": {\n            \"display_name\": \"Delete Event\",\n            \"action_fields\": [\"GOOGLECALENDAR_DELETE_EVENT_calendar_id\", \"GOOGLECALENDAR_DELETE_EVENT_event_id\"],\n        },\n        \"GOOGLECALENDAR_DUPLICATE_CALENDAR\": {\n            \"display_name\": \"Duplicate Calendar\",\n            \"action_fields\": [\"GOOGLECALENDAR_DUPLICATE_CALENDAR_summary\"],\n        },\n    }\n\n    _list_variables = {\n        \"GOOGLECALENDAR_FIND_EVENT_event_types\",\n        \"GOOGLECALENDAR_CREATE_EVENT_recurrence\",\n        \"GOOGLECALENDAR_CREATE_EVENT_attendees\",\n        \"GOOGLECALENDAR_FIND_FREE_SLOTS_items\",\n        \"GOOGLECALENDAR_UPDATE_EVENT_recurrence\",\n        \"GOOGLECALENDAR_UPDATE_EVENT_attendees\",\n    }\n\n    _all_fields = {field for action_data in _actions_data.values() for field in action_data[\"action_fields\"]}\n    _bool_variables = {\n        \"GOOGLECALENDAR_LIST_CALENDARS_show_deleted\",\n        \"GOOGLECALENDAR_LIST_CALENDARS_show_hidden\",\n        \"GOOGLECALENDAR_FIND_EVENT_show_deleted\",\n        \"GOOGLECALENDAR_FIND_EVENT_single_events\",\n        \"GOOGLECALENDAR_CREATE_EVENT_create_meeting_room\",\n        \"GOOGLECALENDAR_CREATE_EVENT_guestsCanSeeOtherGuests\",\n        \"GOOGLECALENDAR_CREATE_EVENT_guestsCanInviteOthers\",\n        \"GOOGLECALENDAR_CREATE_EVENT_guests_can_modify\",\n        \"GOOGLECALENDAR_CREATE_EVENT_send_updates\",\n        \"GOOGLECALENDAR_UPDATE_EVENT_create_meeting_room\",\n        \"GOOGLECALENDAR_UPDATE_EVENT_guestsCanSeeOtherGuests\",\n        \"GOOGLECALENDAR_UPDATE_EVENT_guestsCanInviteOthers\",\n        \"GOOGLECALENDAR_UPDATE_EVENT_guests_can_modify\",\n        \"GOOGLECALENDAR_UPDATE_EVENT_send_updates\",\n    }\n\n    inputs = [\n        *ComposioBaseComponent._base_inputs,\n        IntInput(\n            name=\"GOOGLECALENDAR_LIST_CALENDARS_max_results\",\n            display_name=\"Max Results\",\n            info=\"Maximum number of entries returned on one result page. The page size can never be larger than 250 entries.\",  # noqa: E501\n            show=False,\n            value=10,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_LIST_CALENDARS_min_access_role\",\n            display_name=\"Min Access Role\",\n            info=\"The minimum access role for the user in the returned entries. Accepted values are 'owner' & 'reader'\",\n            show=False,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_LIST_CALENDARS_page_token\",\n            display_name=\"Page Token\",\n            info=\"Token specifying which result page to return.\",\n            show=False,\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"GOOGLECALENDAR_LIST_CALENDARS_show_deleted\",\n            display_name=\"Show Deleted\",\n            info=\"Whether to include deleted calendar list entries in the result.\",\n            show=False,\n            value=False,\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"GOOGLECALENDAR_LIST_CALENDARS_show_hidden\",\n            display_name=\"Show Hidden\",\n            info=\"Whether to show hidden entries.\",\n            show=False,\n            value=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_LIST_CALENDARS_sync_token\",\n            display_name=\"Sync Token\",\n            info=\"Token obtained from the nextSyncToken field returned on the last page of results from the previous list request.\",  # noqa: E501\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_FIND_EVENT_calendar_id\",\n            display_name=\"Calendar Id\",\n            info=\"Identifier of the Google Calendar. Use 'primary' for the currently logged in user's primary calendar.\",  # noqa: E501\n            show=False,\n            value=\"primary\",\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_FIND_EVENT_query\",\n            display_name=\"Query\",\n            info=\"Search term to find events that match these terms in the event's summary, description, location, attendee's displayName, attendee's email, organizer's displayName, organizer's email, etc if needed.\",  # noqa: E501\n            show=False,\n        ),\n        IntInput(\n            name=\"GOOGLECALENDAR_FIND_EVENT_max_results\",\n            display_name=\"Max Results\",\n            info=\"Maximum number of events returned on one result page. The page size can never be larger than 2500 events. The default value is 10.\",  # noqa: E501\n            show=False,\n            value=10,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_FIND_EVENT_order_by\",\n            display_name=\"Order By\",\n            info=\"The order of the events returned in the result. Acceptable values are 'startTime' and 'updated'.\",\n            show=False,\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"GOOGLECALENDAR_FIND_EVENT_show_deleted\",\n            display_name=\"Show Deleted\",\n            info=\"Whether to include deleted events (with status equals 'cancelled') in the result.\",\n            show=False,\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"GOOGLECALENDAR_FIND_EVENT_single_events\",\n            display_name=\"Single Events\",\n            info=\"Whether to expand recurring events into instances and only return single one-off events and instances of recurring events, but not the underlying recurring events themselves.\",  # noqa: E501\n            show=False,\n            value=True,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_FIND_EVENT_timeMax\",\n            display_name=\"Timemax\",\n            info=\"Upper bound (exclusive) for an event's start time to filter by. Accepts multiple formats:, 1. ISO format with timezone (e.g., 2024-12-06T13:00:00Z), 2. Comma-separated format (e.g., 2024,12,06,13,00,00), 3. Simple datetime format (e.g., 2024-12-06 13:00:00)\",  # noqa: E501\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_FIND_EVENT_timeMin\",\n            display_name=\"Timemin\",\n            info=\"Lower bound (exclusive) for an event's end time to filter by. Accepts multiple formats:, 1. ISO format with timezone (e.g., 2024-12-06T13:00:00Z), 2. Comma-separated format (e.g., 2024,12,06,13,00,00), 3. Simple datetime format (e.g., 2024-12-06 13:00:00)\",  # noqa: E501\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_FIND_EVENT_updated_min\",\n            display_name=\"Updated Min\",\n            info=\"Lower bound for an event's last modification time to filter by. Accepts multiple formats:, 1. ISO format with timezone (e.g., 2024-12-06T13:00:00Z), 2. Comma-separated format (e.g., 2024,12,06,13,00,00), 3. Simple datetime format (e.g., 2024-12-06 13:00:00)\",  # noqa: E501\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_FIND_EVENT_event_types\",\n            display_name=\"Event Types\",\n            info=\"List of event types to return. Possible values are: default, outOfOffice, focusTime, workingLocation.\",  # noqa: E501\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_FIND_EVENT_page_token\",\n            display_name=\"Page Token\",\n            info=\"Token specifying which result page to return. Optional.\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_DUPLICATE_CALENDAR_summary\",\n            display_name=\"Summary/Title\",\n            info=\"Title of the calendar to be duplicated.\",\n            show=False,\n            value=\"\",\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_REMOVE_ATTENDEE_calendar_id\",\n            display_name=\"Calendar Id\",\n            info=\"ID of the Google Calendar\",\n            show=False,\n            value=\"primary\",\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_REMOVE_ATTENDEE_event_id\",\n            display_name=\"Event Id\",\n            info=\"ID of the event\",\n            show=False,\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_REMOVE_ATTENDEE_attendee_email\",\n            display_name=\"Attendee Email\",\n            info=\"Email address of the attendee to be removed\",\n            show=False,\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_GET_CALENDAR_calendar_id\",\n            display_name=\"Calendar Id\",\n            info=\"The ID of the Google Calendar that needs to be fetched. Default is 'primary'.\",\n            show=False,\n            value=\"primary\",\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_CREATE_EVENT_description\",\n            display_name=\"Description\",\n            info=\"Description of the event. Can contain HTML. Optional.\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_CREATE_EVENT_eventType\",\n            display_name=\"Event Type\",\n            info=\"Type of the event, immutable post-creation. Currently, only 'default'\",\n            show=False,\n            value=\"default\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"GOOGLECALENDAR_CREATE_EVENT_create_meeting_room\",\n            display_name=\"Create Meeting Room\",\n            info=\"If true, a Google Meet link is created and added to the event.\",\n            show=False,\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"GOOGLECALENDAR_CREATE_EVENT_guestsCanSeeOtherGuests\",\n            display_name=\"Guests Can See Other Guests\",\n            info=\"Whether attendees other than the organizer can see who the event's attendees are.\",\n            show=False,\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"GOOGLECALENDAR_CREATE_EVENT_guestsCanInviteOthers\",\n            display_name=\"Guests Can Invite Others\",\n            info=\"Whether attendees other than the organizer can invite others to the event.\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_CREATE_EVENT_location\",\n            display_name=\"Location\",\n            info=\"Geographic location of the event as free-form text.\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_CREATE_EVENT_summary\",\n            display_name=\"Summary/Title\",\n            info=\"Summary (title) of the event.\",\n            show=False,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_CREATE_EVENT_transparency\",\n            display_name=\"Event Transparency\",\n            info=\"'opaque' (busy) or 'transparent' (available).\",\n            show=False,\n            value=\"opaque\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_CREATE_EVENT_visibility\",\n            display_name=\"Event Visibility\",\n            info=\"Event visibility: 'default', 'public', 'private', or 'confidential'.\",\n            show=False,\n            value=\"default\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_CREATE_EVENT_timezone\",\n            display_name=\"Timezone\",\n            info=\"IANA timezone name (e.g., 'America/New_York'). Required if datetime is naive. If datetime includes timezone info (Z or offset), this field is optional and defaults to UTC.\",  # noqa: E501\n            show=False,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_CREATE_EVENT_recurrence\",\n            display_name=\"Recurrence\",\n            info=\"List of RRULE, EXRULE, RDATE, EXDATE lines for recurring events.\",\n            show=False,\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"GOOGLECALENDAR_CREATE_EVENT_guests_can_modify\",\n            display_name=\"Guests Can Modify\",\n            info=\"If True, guests can modify the event.\",\n            show=False,\n            value=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_CREATE_EVENT_attendees\",\n            display_name=\"Attendees\",\n            info=\"List of attendee emails (strings).\",\n            show=False,\n        ),\n        BoolInput(\n            name=\"GOOGLECALENDAR_CREATE_EVENT_send_updates\",\n            display_name=\"Send Updates\",\n            info=\"Defaults to True. Whether to send updates to the attendees.\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_CREATE_EVENT_start_datetime\",\n            display_name=\"Start Datetime\",\n            info=\"Naive date/time (YYYY-MM-DDTHH:MM:SS) with NO offsets or Z. e.g. '2025-01-16T13:00:00'\",\n            show=False,\n            required=True,\n        ),\n        IntInput(\n            name=\"GOOGLECALENDAR_CREATE_EVENT_event_duration_hour\",\n            display_name=\"Event Duration Hour\",\n            info=\"Number of hours (0-24).\",\n            show=False,\n            value=0,\n            advanced=True,\n        ),\n        IntInput(\n            name=\"GOOGLECALENDAR_CREATE_EVENT_event_duration_minutes\",\n            display_name=\"Event Duration Minutes\",\n            info=\"Number of minutes (0-59).\",\n            show=False,\n            value=30,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_CREATE_EVENT_calendar_id\",\n            display_name=\"Calendar Id\",\n            info=\"The ID of the Google Calendar. `primary` for interacting with the primary calendar.\",\n            show=False,\n            value=\"primary\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_DELETE_EVENT_calendar_id\",\n            display_name=\"Calendar Id\",\n            info=\"ID of the Google Calendar\",\n            show=False,\n            value=\"primary\",\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_DELETE_EVENT_event_id\",\n            display_name=\"Event Id\",\n            info=\"ID of the event to be deleted\",\n            show=False,\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_FIND_FREE_SLOTS_time_min\",\n            display_name=\"Time Min\",\n            info=\"The start datetime of the interval for the query. Supports multiple formats:, 1. ISO format with timezone (e.g., 2024-12-06T13:00:00Z), 2. Comma-separated format (e.g., 2024,12,06,13,00,00), 3. Simple datetime format (e.g., 2024-12-06 13:00:00)\",  # noqa: E501\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_FIND_FREE_SLOTS_time_max\",\n            display_name=\"Time Max\",\n            info=\"The end datetime of the interval for the query. Supports multiple formats:, 1. ISO format with timezone (e.g., 2024-12-06T13:00:00Z), 2. Comma-separated format (e.g., 2024,12,06,13,00,00), 3. Simple datetime format (e.g., 2024-12-06 13:00:00)\",  # noqa: E501\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_FIND_FREE_SLOTS_timezone\",\n            display_name=\"Timezone\",\n            info=\"Time zone used in the response. Optional. The default is UTC.\",\n            show=False,\n            value=\"UTC\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"GOOGLECALENDAR_FIND_FREE_SLOTS_group_expansion_max\",\n            display_name=\"Group Expansion Max\",\n            info=\"Maximal number of calendar identifiers to be provided for a single group. Optional. An error is returned for a group with more members than this value. Maximum value is 100.\",  # noqa: E501\n            show=False,\n            value=100,\n            advanced=True,\n        ),\n        IntInput(\n            name=\"GOOGLECALENDAR_FIND_FREE_SLOTS_calendar_expansion_max\",\n            display_name=\"Calendar Expansion Max\",\n            info=\"Maximal number of calendars for which FreeBusy information is to be provided. Optional. Maximum value is 50.\",  # noqa: E501\n            show=False,\n            value=50,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_FIND_FREE_SLOTS_items\",\n            display_name=\"Items\",\n            info=\"List of calendars ids for which to fetch\",\n            show=False,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_QUICK_ADD_calendar_id\",\n            display_name=\"Calendar Id\",\n            info=\"Calendar identifier. To list calendars to retrieve calendar IDs use relevant tools. To access the primary calendar of the currently logged in user, use the 'primary' keyword.\",  # noqa: E501\n            show=False,\n            value=\"primary\",\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_QUICK_ADD_text\",\n            display_name=\"Text\",\n            info=\"The text describing the event to be created.\",\n            show=False,\n            value=\"\",\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_QUICK_ADD_send_updates\",\n            display_name=\"Send Updates\",\n            info=\"Guests who should receive notifications about the creation of the new event. Accepted fields include 'all', 'none', 'externalOnly'\",  # noqa: E501\n            show=False,\n            value=\"none\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_PATCH_CALENDAR_calendar_id\",\n            display_name=\"Calendar Id\",\n            info=\"The ID of the Google Calendar that needs to be updated.\",\n            show=False,\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_PATCH_CALENDAR_description\",\n            display_name=\"Description\",\n            info=\"Description of the calendar. Optional.\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_PATCH_CALENDAR_location\",\n            display_name=\"Location\",\n            info=\"Geographic location of the calendar as free-form text.\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_PATCH_CALENDAR_summary\",\n            display_name=\"Title/Summary\",\n            info=\"Title of the calendar. This field is required and cannot be left blank as per the Google Calendar API requirements.\",  # noqa: E501\n            show=False,\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_PATCH_CALENDAR_timezone\",\n            display_name=\"Timezone\",\n            info=\"The time zone of the calendar. (Formatted as an IANA Time Zone Database name, e.g. 'Europe/Zurich').\",\n            show=False,\n            advanced=True,\n        ),\n        IntInput(\n            name=\"GOOGLECALENDAR_GET_CURRENT_DATE_TIME_timezone\",\n            display_name=\"Timezone\",\n            info=\"The timezone offset from UTC to retrieve current date and time, like for location of UTC+6, you give 6, for UTC -9, your give -9.\",  # noqa: E501\n            show=False,\n            value=0,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_description\",\n            display_name=\"Description\",\n            info=\"Description of the event. Can contain HTML. Optional.\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_eventType\",\n            display_name=\"EventType\",\n            info=\"Type of the event, immutable post-creation. Currently, only 'default' and 'workingLocation' can be created.\",  # noqa: E501\n            show=False,\n            value=\"default\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_create_meeting_room\",\n            display_name=\"Create Meeting Room\",\n            info=\"If true, a Google Meet link is created and added to the event.\",\n            show=False,\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_guestsCanSeeOtherGuests\",\n            display_name=\"Guests Can See Other Guests\",\n            info=\"Whether attendees other than the organizer can see who the event's attendees are.\",\n            show=False,\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_guestsCanInviteOthers\",\n            display_name=\"Guests Can Invite Others\",\n            info=\"Whether attendees other than the organizer can invite others to the event.\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_location\",\n            display_name=\"Location\",\n            info=\"Geographic location of the event as free-form text.\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_summary\",\n            display_name=\"Summary/Title\",\n            info=\"Summary (title) of the event.\",\n            show=False,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_transparency\",\n            display_name=\"Event Transparency\",\n            info=\"'opaque' (busy) or 'transparent' (available).\",\n            show=False,\n            value=\"opaque\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_visibility\",\n            display_name=\"Event Visibility\",\n            info=\"Event visibility: 'default', 'public', 'private', or 'confidential'.\",\n            show=False,\n            value=\"default\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_timezone\",\n            display_name=\"Timezone\",\n            info=\"IANA timezone name (e.g., 'America/New_York'). Required if datetime is naive. If datetime includes timezone info (Z or offset), this field is optional and defaults to UTC.\",  # noqa: E501\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_recurrence\",\n            display_name=\"Recurrence\",\n            info=\"List of RRULE, EXRULE, RDATE, EXDATE lines for recurring events.\",\n            show=False,\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_guests_can_modify\",\n            display_name=\"Guests Can Modify\",\n            info=\"If True, guests can modify the event.\",\n            show=False,\n            value=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_attendees\",\n            display_name=\"Attendees\",\n            info=\"List of attendee emails (strings).\",\n            show=False,\n        ),\n        BoolInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_send_updates\",\n            display_name=\"Send Updates\",\n            info=\"Defaults to True. Whether to send updates to the attendees.\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_start_datetime\",\n            display_name=\"Start Datetime\",\n            info=\"Naive date/time (YYYY-MM-DDTHH:MM:SS) with NO offsets or Z. e.g. '2025-01-16T13:00:00'\",\n            show=False,\n            required=True,\n        ),\n        IntInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_event_duration_hour\",\n            display_name=\"Event Duration Hour\",\n            info=\"Number of hours (0-24).\",\n            show=False,\n            value=0,\n            advanced=True,\n        ),\n        IntInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_event_duration_minutes\",\n            display_name=\"Event Duration Minutes\",\n            info=\"Number of minutes (0-59).\",\n            show=False,\n            value=30,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_calendar_id\",\n            display_name=\"Calendar Id\",\n            info=\"ID of the Google Calendar\",\n            show=False,\n            value=\"primary\",\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_event_id\",\n            display_name=\"Event Id\",\n            info=\"ID of the event to be updated\",\n            show=False,\n            required=True,\n        ),\n    ]\n\n    def execute_action(self):\n        \"\"\"Execute action and return response as Message.\"\"\"\n        toolset = self._build_wrapper()\n\n        try:\n            self._build_action_maps()\n            # Get the display name from the action list\n            display_name = self.action[0][\"name\"] if isinstance(self.action, list) and self.action else self.action\n            # Use the display_to_key_map to get the action key\n            action_key = self._display_to_key_map.get(display_name)\n            if not action_key:\n                msg = f\"Invalid action: {display_name}\"\n                raise ValueError(msg)\n\n            enum_name = getattr(Action, action_key)\n            params = {}\n            if action_key in self._actions_data:\n                for field in self._actions_data[action_key][\"action_fields\"]:\n                    value = getattr(self, field)\n\n                    if value is None or value == \"\":\n                        continue\n\n                    if field in self._list_variables and value:\n                        value = [item.strip() for item in value.split(\",\")]\n\n                    if field in self._bool_variables:\n                        value = bool(value)\n\n                    param_name = field.replace(action_key + \"_\", \"\")\n                    params[param_name] = value\n\n            result = toolset.execute_action(\n                action=enum_name,\n                params=params,\n            )\n            if not result.get(\"successful\"):\n                message_str = result.get(\"error\", {})\n                return {\"error\": message_str}\n\n            result_data = result.get(\"data\", [])\n            if (\n                len(result_data) != 1\n                and not self._actions_data.get(action_key, {}).get(\"result_field\")\n                and self._actions_data.get(action_key, {}).get(\"get_result_field\")\n            ):\n                msg = f\"Expected a dict with a single key, got {len(result_data)} keys: {result_data.keys()}\"\n                raise ValueError(msg)\n            if action_key == \"GOOGLECALENDAR_GET_CURRENT_DATE_TIME\":\n                return result_data\n            return result_data[next(iter(result_data))]\n        except Exception as e:\n            logger.error(f\"Error executing action: {e}\")\n            display_name = self.action[0][\"name\"] if isinstance(self.action, list) and self.action else str(self.action)\n            msg = f\"Failed to execute {display_name}: {e!s}\"\n            raise ValueError(msg) from e\n\n    def update_build_config(self, build_config: dict, field_value: Any, field_name: str | None = None) -> dict:\n        return super().update_build_config(build_config, field_value, field_name)\n"
              },
              "entity_id": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Entity ID",
                "dynamic": false,
                "info": "",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "entity_id",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "default"
              },
              "tools_metadata": {
                "_input_type": "ToolsInput",
                "advanced": false,
                "display_name": "Actions",
                "dynamic": false,
                "info": "Modify tool names and descriptions to help agents understand when to use each tool.",
                "is_list": true,
                "list_add_label": "Add More",
                "name": "tools_metadata",
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "tools",
                "value": [
                  {
                    "args": {
                      "attendees": {
                        "default": null,
                        "description": "List of attendee emails (strings).",
                        "examples": [],
                        "items": {
                          "type": "string"
                        },
                        "title": "Attendees",
                        "type": "array"
                      },
                      "calendar_id": {
                        "default": "primary",
                        "description": "Target calendar: 'primary' for the user's main calendar, or the calendar's email address. Please provide a value of type string.",
                        "examples": [
                          "primary",
                          "user@example.com",
                          "abcdefghijklmnopqrstuvwxyz@group.calendar.google.com"
                        ],
                        "title": "Calendar Id",
                        "type": "string"
                      },
                      "create_meeting_room": {
                        "default": null,
                        "description": "If true, a Google Meet link is created and added to the event. CRITICAL: As of 2024, this REQUIRES a paid Google Workspace account ($13+/month). Personal Gmail accounts will fail with 'Invalid conference type value' error. Solutions: 1) Upgrade to Workspace, 2) Use domain-wide delegation with Workspace user, 3) Use the new Google Meet REST API, or 4) Create events without conferences. See https://github.com/googleapis/google-api-nodejs-client/issues/3234. Please provide a value of type boolean.",
                        "examples": [],
                        "title": "Create Meeting Room",
                        "type": "boolean"
                      },
                      "description": {
                        "default": null,
                        "description": "Description of the event. Can contain HTML. Optional. Please provide a value of type string.",
                        "examples": [],
                        "title": "Description",
                        "type": "string"
                      },
                      "eventType": {
                        "default": "default",
                        "description": "Type of the event, immutable post-creation. Currently, only 'default' and 'workingLocation' can be created. Please provide a value of type string.",
                        "examples": [],
                        "title": "Eventtype",
                        "type": "string"
                      },
                      "event_duration_hour": {
                        "default": 0,
                        "description": "Number of hours (0-24). Increase by 1 here rather than passing 60 in `event_duration_minutes`. Please provide a value of type integer.",
                        "examples": [],
                        "title": "Event Duration Hour",
                        "type": "integer"
                      },
                      "event_duration_minutes": {
                        "default": 30,
                        "description": "Duration in minutes (0-59 ONLY). NEVER use 60+ minutes - use event_duration_hour=1 instead. Maximum value is 59. Please provide a value of type integer.",
                        "examples": [],
                        "title": "Event Duration Minutes",
                        "type": "integer"
                      },
                      "guestsCanInviteOthers": {
                        "default": null,
                        "description": "Whether attendees other than the organizer can invite others to the event. Please provide a value of type boolean.",
                        "examples": [],
                        "title": "Guestscaninviteothers",
                        "type": "boolean"
                      },
                      "guestsCanSeeOtherGuests": {
                        "default": null,
                        "description": "Whether attendees other than the organizer can see who the event's attendees are. Please provide a value of type boolean.",
                        "examples": [],
                        "title": "Guestscanseeotherguests",
                        "type": "boolean"
                      },
                      "guests_can_modify": {
                        "default": false,
                        "description": "If True, guests can modify the event. Please provide a value of type boolean.",
                        "examples": [],
                        "title": "Guests Can Modify",
                        "type": "boolean"
                      },
                      "location": {
                        "default": null,
                        "description": "Geographic location of the event as free-form text. Please provide a value of type string.",
                        "examples": [],
                        "title": "Location",
                        "type": "string"
                      },
                      "recurrence": {
                        "default": null,
                        "description": "List of RRULE, EXRULE, RDATE, EXDATE lines for recurring events.",
                        "examples": [],
                        "items": {
                          "type": "string"
                        },
                        "title": "Recurrence",
                        "type": "array"
                      },
                      "send_updates": {
                        "default": null,
                        "description": "Defaults to True. Whether to send updates to the attendees. Please provide a value of type boolean.",
                        "examples": [],
                        "title": "Send Updates",
                        "type": "boolean"
                      },
                      "start_datetime": {
                        "description": "Naive date/time (YYYY-MM-DDTHH:MM:SS) with NO offsets or Z. e.g. '2025-01-16T13:00:00'. Please provide a value of type string. This parameter is required.",
                        "examples": [],
                        "title": "Start Datetime",
                        "type": "string"
                      },
                      "summary": {
                        "default": null,
                        "description": "Summary (title) of the event. Please provide a value of type string.",
                        "examples": [],
                        "title": "Summary",
                        "type": "string"
                      },
                      "timezone": {
                        "default": null,
                        "description": "IANA timezone name (e.g., 'America/New_York'). Required if datetime is naive. If datetime includes timezone info (Z or offset), this field is optional and defaults to UTC. Please provide a value of type string.",
                        "examples": [],
                        "title": "Timezone",
                        "type": "string"
                      },
                      "transparency": {
                        "default": "opaque",
                        "description": "'opaque' (busy) or 'transparent' (available). Please provide a value of type string.",
                        "examples": [],
                        "title": "Transparency",
                        "type": "string"
                      },
                      "visibility": {
                        "default": "default",
                        "description": "Event visibility: 'default', 'public', 'private', or 'confidential'. Please provide a value of type string.",
                        "examples": [],
                        "title": "Visibility",
                        "type": "string"
                      }
                    },
                    "description": "Creates an event on a google calendar, needing rfc3339 utc start/end times (end after start) and write access to the calendar.",
                    "display_description": "Creates an event on a google calendar, needing rfc3339 utc start/end times (end after start) and write access to the calendar.",
                    "display_name": "Create Event",
                    "name": "googlecalendar_create_event",
                    "readonly": true,
                    "status": true,
                    "tags": [
                      "GOOGLECALENDAR_CREATE_EVENT"
                    ]
                  },
                  {
                    "args": {
                      "calendar_id": {
                        "default": "primary",
                        "description": "Identifier of the Google Calendar (e.g., email address, specific ID, or 'primary' for the authenticated user's main calendar) from which the event will be deleted. Please provide a value of type string.",
                        "examples": [
                          "primary",
                          "user@example.com",
                          "abcsomecalendarid@group.calendar.google.com"
                        ],
                        "title": "Calendar Id",
                        "type": "string"
                      },
                      "event_id": {
                        "description": "Unique identifier of the event to delete, typically obtained upon event creation. Please provide a value of type string. This parameter is required.",
                        "examples": [],
                        "title": "Event Id",
                        "type": "string"
                      }
                    },
                    "description": "Deletes a specified event by `event id` from a google calendar (`calendar id`); this action is idempotent and raises a 404 error if the event is not found.",
                    "display_description": "Deletes a specified event by `event id` from a google calendar (`calendar id`); this action is idempotent and raises a 404 error if the event is not found.",
                    "display_name": "Delete Event",
                    "name": "googlecalendar_delete_event",
                    "readonly": true,
                    "status": false,
                    "tags": [
                      "GOOGLECALENDAR_DELETE_EVENT"
                    ]
                  },
                  {
                    "args": {
                      "summary": {
                        "default": "",
                        "description": "Title for the new Google Calendar to be created. If an empty string is provided, the calendar will be created without a title. Please provide a value of type string.",
                        "examples": [
                          "Project Alpha Tasks",
                          "Marketing Team Q4",
                          "Personal Appointments"
                        ],
                        "title": "Summary",
                        "type": "string"
                      }
                    },
                    "description": "Creates a new, empty google calendar with the specified title (summary).",
                    "display_description": "Creates a new, empty google calendar with the specified title (summary).",
                    "display_name": "Duplicate Calendar",
                    "name": "googlecalendar_duplicate_calendar",
                    "readonly": true,
                    "status": false,
                    "tags": [
                      "GOOGLECALENDAR_DUPLICATE_CALENDAR"
                    ]
                  },
                  {
                    "args": {
                      "calendar_id": {
                        "default": "primary",
                        "description": "Identifier of the Google Calendar to query. Use 'primary' for the primary calendar of the authenticated user, an email address for a specific user's calendar, or a calendar ID for other calendars. Please provide a value of type string.",
                        "examples": [
                          "primary",
                          "user@example.com",
                          "abc...@group.calendar.google.com"
                        ],
                        "title": "Calendar Id",
                        "type": "string"
                      },
                      "event_types": {
                        "default": [
                          "default",
                          "outOfOffice",
                          "focusTime",
                          "workingLocation"
                        ],
                        "description": "Event types to include: 'default' (regular event), 'focusTime' (focused work time), 'outOfOffice' (out-of-office time).",
                        "examples": [
                          "default",
                          "focusTime",
                          "outOfOffice"
                        ],
                        "items": {
                          "type": "string"
                        },
                        "title": "Event Types",
                        "type": "array"
                      },
                      "max_results": {
                        "default": 10,
                        "description": "Maximum number of events per page (1-2500). Please provide a value of type integer.",
                        "examples": [],
                        "title": "Max Results",
                        "type": "integer"
                      },
                      "order_by": {
                        "default": null,
                        "description": "Order of events: 'startTime' (ascending by start time) or 'updated' (ascending by last modification time). Please provide a value of type string.",
                        "examples": [
                          "startTime",
                          "updated"
                        ],
                        "title": "Order By",
                        "type": "string"
                      },
                      "page_token": {
                        "default": null,
                        "description": "Token from a previous response's `nextPageToken` to fetch the subsequent page of results. Please provide a value of type string.",
                        "examples": [],
                        "title": "Page Token",
                        "type": "string"
                      },
                      "query": {
                        "default": null,
                        "description": "Free-text search terms to find events. This query is matched against various event fields including summary, description, location, attendees' details (displayName, email), and organizer's details. Please provide a value of type string.",
                        "examples": [
                          "Project Alpha Review",
                          "Birthday Party",
                          "Q3 Planning session"
                        ],
                        "title": "Query",
                        "type": "string"
                      },
                      "show_deleted": {
                        "default": null,
                        "description": "Include deleted events (status 'cancelled') in the result. Please provide a value of type boolean.",
                        "examples": [],
                        "title": "Show Deleted",
                        "type": "boolean"
                      },
                      "single_events": {
                        "default": true,
                        "description": "Expand recurring events into individual instances. If false, returns master recurring events. Please provide a value of type boolean.",
                        "examples": [],
                        "title": "Single Events",
                        "type": "boolean"
                      },
                      "timeMax": {
                        "default": null,
                        "description": "Upper bound (exclusive) for an event's start time to filter by. Only events starting before this time are included. Accepts multiple formats:\n1. RFC3339 timestamp (e.g., '2024-12-06T13:00:00Z')\n2. Comma-separated date/time parts (e.g., '2024,12,06,13,00,00')\n3. Simple datetime string (e.g., '2024-12-06 13:00:00'). Please provide a value of type string.",
                        "examples": [
                          "2024-12-31T23:59:59Z",
                          "2025-01-01 10:00:00"
                        ],
                        "title": "Timemax",
                        "type": "string"
                      },
                      "timeMin": {
                        "default": null,
                        "description": "Lower bound (exclusive) for an event's end time to filter by. Only events ending after this time are included. Accepts multiple formats:\n1. RFC3339 timestamp (e.g., '2024-12-06T13:00:00Z')\n2. Comma-separated date/time parts (e.g., '2024,12,06,13,00,00')\n3. Simple datetime string (e.g., '2024-12-06 13:00:00'). Please provide a value of type string.",
                        "examples": [
                          "2024-01-01T00:00:00Z",
                          "2024-06-15 09:00:00"
                        ],
                        "title": "Timemin",
                        "type": "string"
                      },
                      "updated_min": {
                        "default": null,
                        "description": "Lower bound (exclusive) for an event's last modification time to filter by. Only events updated after this time are included. When specified, events deleted since this time are also included, regardless of the `show_deleted` parameter. Accepts multiple formats:\n1. RFC3339 timestamp (e.g., '2024-12-06T13:00:00Z')\n2. Comma-separated date/time parts (e.g., '2024,12,06,13,00,00')\n3. Simple datetime string (e.g., '2024-12-06 13:00:00'). Please provide a value of type string.",
                        "examples": [
                          "2024-07-01T00:00:00Z"
                        ],
                        "title": "Updated Min",
                        "type": "string"
                      }
                    },
                    "description": "Finds events in a specified google calendar using text query, time ranges (event start/end, last modification), and event types; ensure `timemin` is not chronologically after `timemax` if both are provided.",
                    "display_description": "Finds events in a specified google calendar using text query, time ranges (event start/end, last modification), and event types; ensure `timemin` is not chronologically after `timemax` if both are provided.",
                    "display_name": "Find Event",
                    "name": "googlecalendar_find_event",
                    "readonly": true,
                    "status": true,
                    "tags": [
                      "GOOGLECALENDAR_FIND_EVENT"
                    ]
                  },
                  {
                    "args": {
                      "calendar_id": {
                        "default": "primary",
                        "description": "Identifier of the Google Calendar to retrieve. 'primary' (the default) represents the user's main calendar; other valid identifiers include the calendar's email address. Please provide a value of type string.",
                        "examples": [
                          "primary",
                          "user@example.com",
                          "en.usa#holiday@group.v.calendar.google.com"
                        ],
                        "title": "Calendar Id",
                        "type": "string"
                      }
                    },
                    "description": "Retrieves a specific google calendar, identified by `calendar id`, to which the authenticated user has access.",
                    "display_description": "Retrieves a specific google calendar, identified by `calendar id`, to which the authenticated user has access.",
                    "display_name": "Fetch Google Calendar",
                    "name": "googlecalendar_get_calendar",
                    "readonly": true,
                    "status": false,
                    "tags": [
                      "GOOGLECALENDAR_GET_CALENDAR"
                    ]
                  },
                  {
                    "args": {
                      "calendar_id": {
                        "description": "Identifier of the Google Calendar to update; use 'primary' for the main calendar or a specific ID. Please provide a value of type string. This parameter is required.",
                        "examples": [
                          "primary",
                          "secondaryCalendarIdAbc...",
                          "example@group.calendar.google.com"
                        ],
                        "title": "Calendar Id",
                        "type": "string"
                      },
                      "description": {
                        "default": null,
                        "description": "New description for the calendar. Please provide a value of type string.",
                        "examples": [],
                        "title": "Description",
                        "type": "string"
                      },
                      "location": {
                        "default": null,
                        "description": "New geographic location of the calendar (e.g., 'Paris, France'). Please provide a value of type string.",
                        "examples": [
                          "Paris, France",
                          "London"
                        ],
                        "title": "Location",
                        "type": "string"
                      },
                      "summary": {
                        "description": "New title for the calendar; cannot be an empty string. Please provide a value of type string. This parameter is required.",
                        "examples": [
                          "Team Meetings",
                          "Project Alpha Milestones"
                        ],
                        "title": "Summary",
                        "type": "string"
                      },
                      "timezone": {
                        "default": null,
                        "description": "New IANA Time Zone Database name for the calendar (e.g., 'Europe/Zurich', 'America/New_York'). Please provide a value of type string.",
                        "examples": [
                          "Europe/Zurich",
                          "America/New_York",
                          "Asia/Tokyo"
                        ],
                        "title": "Timezone",
                        "type": "string"
                      }
                    },
                    "description": "Partially updates (patches) an existing google calendar, modifying only the fields provided; `summary` is mandatory and cannot be an empty string, and an empty string for `description` or `location` clears them.",
                    "display_description": "Partially updates (patches) an existing google calendar, modifying only the fields provided; `summary` is mandatory and cannot be an empty string, and an empty string for `description` or `location` clears them.",
                    "display_name": "Patch Calendar",
                    "name": "googlecalendar_patch_calendar",
                    "readonly": true,
                    "status": false,
                    "tags": [
                      "GOOGLECALENDAR_PATCH_CALENDAR"
                    ]
                  },
                  {
                    "args": {
                      "calendar_id": {
                        "default": "primary",
                        "description": "Identifier of the calendar for the event. Use 'primary' for the main calendar, or provide a specific calendar ID (e.g., email address). Please provide a value of type string.",
                        "examples": [
                          "primary",
                          "user@example.com",
                          "xxxxxxxxxxxxxxxxx@group.calendar.google.com"
                        ],
                        "title": "Calendar Id",
                        "type": "string"
                      },
                      "send_updates": {
                        "default": "none",
                        "description": "Controls whether email notifications about the event creation are sent to attendees. Please provide a value of type string.",
                        "examples": [],
                        "title": "Send Updates",
                        "type": "string"
                      },
                      "text": {
                        "default": "",
                        "description": "Natural language input describing the event; Google Calendar parses this for event details like title, date, and time. Please provide a value of type string.",
                        "examples": [
                          "Appointment at Somewhere on June 3rd 10am-10:25am",
                          "Dentist appointment tomorrow at 2pm for 45 minutes"
                        ],
                        "title": "Text",
                        "type": "string"
                      }
                    },
                    "description": "Parses natural language text to quickly create a basic google calendar event with its title, date, and time, suitable for simple scheduling; does not support recurring events or direct attendee addition via parameters, and `calendar id` must be valid if not 'primary'.",
                    "display_description": "Parses natural language text to quickly create a basic google calendar event with its title, date, and time, suitable for simple scheduling; does not support recurring events or direct attendee addition via parameters, and `calendar id` must be valid if not 'primary'.",
                    "display_name": "Quick Add Event",
                    "name": "googlecalendar_quick_add",
                    "readonly": true,
                    "status": true,
                    "tags": [
                      "GOOGLECALENDAR_QUICK_ADD"
                    ]
                  },
                  {
                    "args": {
                      "attendees": {
                        "default": null,
                        "description": "List of attendee emails (strings).",
                        "examples": [],
                        "items": {
                          "type": "string"
                        },
                        "title": "Attendees",
                        "type": "array"
                      },
                      "calendar_id": {
                        "default": "primary",
                        "description": "Identifier of the Google Calendar where the event resides. The value 'primary' targets the user's primary calendar. Please provide a value of type string.",
                        "examples": [
                          "primary",
                          "user@example.com",
                          "long_calendar_id@group.calendar.google.com"
                        ],
                        "title": "Calendar Id",
                        "type": "string"
                      },
                      "create_meeting_room": {
                        "default": null,
                        "description": "If true, a Google Meet link is created and added to the event. CRITICAL: As of 2024, this REQUIRES a paid Google Workspace account ($13+/month). Personal Gmail accounts will fail with 'Invalid conference type value' error. Solutions: 1) Upgrade to Workspace, 2) Use domain-wide delegation with Workspace user, 3) Use the new Google Meet REST API, or 4) Create events without conferences. See https://github.com/googleapis/google-api-nodejs-client/issues/3234. Please provide a value of type boolean.",
                        "examples": [],
                        "title": "Create Meeting Room",
                        "type": "boolean"
                      },
                      "description": {
                        "default": null,
                        "description": "Description of the event. Can contain HTML. Optional. Please provide a value of type string.",
                        "examples": [],
                        "title": "Description",
                        "type": "string"
                      },
                      "eventType": {
                        "default": "default",
                        "description": "Type of the event, immutable post-creation. Currently, only 'default' and 'workingLocation' can be created. Please provide a value of type string.",
                        "examples": [],
                        "title": "Eventtype",
                        "type": "string"
                      },
                      "event_duration_hour": {
                        "default": 0,
                        "description": "Number of hours (0-24). Increase by 1 here rather than passing 60 in `event_duration_minutes`. Please provide a value of type integer.",
                        "examples": [],
                        "title": "Event Duration Hour",
                        "type": "integer"
                      },
                      "event_duration_minutes": {
                        "default": 30,
                        "description": "Duration in minutes (0-59 ONLY). NEVER use 60+ minutes - use event_duration_hour=1 instead. Maximum value is 59. Please provide a value of type integer.",
                        "examples": [],
                        "title": "Event Duration Minutes",
                        "type": "integer"
                      },
                      "event_id": {
                        "description": "The unique identifier of the event to be updated. Please provide a value of type string. This parameter is required.",
                        "examples": [
                          "a1b2c3d4e5f6g7h8i9j0k1l2m3"
                        ],
                        "title": "Event Id",
                        "type": "string"
                      },
                      "guestsCanInviteOthers": {
                        "default": null,
                        "description": "Whether attendees other than the organizer can invite others to the event. Please provide a value of type boolean.",
                        "examples": [],
                        "title": "Guestscaninviteothers",
                        "type": "boolean"
                      },
                      "guestsCanSeeOtherGuests": {
                        "default": null,
                        "description": "Whether attendees other than the organizer can see who the event's attendees are. Please provide a value of type boolean.",
                        "examples": [],
                        "title": "Guestscanseeotherguests",
                        "type": "boolean"
                      },
                      "guests_can_modify": {
                        "default": false,
                        "description": "If True, guests can modify the event. Please provide a value of type boolean.",
                        "examples": [],
                        "title": "Guests Can Modify",
                        "type": "boolean"
                      },
                      "location": {
                        "default": null,
                        "description": "Geographic location of the event as free-form text. Please provide a value of type string.",
                        "examples": [],
                        "title": "Location",
                        "type": "string"
                      },
                      "recurrence": {
                        "default": null,
                        "description": "List of RRULE, EXRULE, RDATE, EXDATE lines for recurring events.",
                        "examples": [],
                        "items": {
                          "type": "string"
                        },
                        "title": "Recurrence",
                        "type": "array"
                      },
                      "send_updates": {
                        "default": null,
                        "description": "Defaults to True. Whether to send updates to the attendees. Please provide a value of type boolean.",
                        "examples": [],
                        "title": "Send Updates",
                        "type": "boolean"
                      },
                      "start_datetime": {
                        "description": "Naive date/time (YYYY-MM-DDTHH:MM:SS) with NO offsets or Z. e.g. '2025-01-16T13:00:00'. Please provide a value of type string. This parameter is required.",
                        "examples": [],
                        "title": "Start Datetime",
                        "type": "string"
                      },
                      "summary": {
                        "default": null,
                        "description": "Summary (title) of the event. Please provide a value of type string.",
                        "examples": [],
                        "title": "Summary",
                        "type": "string"
                      },
                      "timezone": {
                        "default": null,
                        "description": "IANA timezone name (e.g., 'America/New_York'). Required if datetime is naive. If datetime includes timezone info (Z or offset), this field is optional and defaults to UTC. Please provide a value of type string.",
                        "examples": [],
                        "title": "Timezone",
                        "type": "string"
                      },
                      "transparency": {
                        "default": "opaque",
                        "description": "'opaque' (busy) or 'transparent' (available). Please provide a value of type string.",
                        "examples": [],
                        "title": "Transparency",
                        "type": "string"
                      },
                      "visibility": {
                        "default": "default",
                        "description": "Event visibility: 'default', 'public', 'private', or 'confidential'. Please provide a value of type string.",
                        "examples": [],
                        "title": "Visibility",
                        "type": "string"
                      }
                    },
                    "description": "Updates an existing event by `event id` in a google calendar; this is a full put replacement, so provide all desired fields as unspecified ones may be cleared or reset.",
                    "display_description": "Updates an existing event by `event id` in a google calendar; this is a full put replacement, so provide all desired fields as unspecified ones may be cleared or reset.",
                    "display_name": "Update Google Event",
                    "name": "googlecalendar_update_event",
                    "readonly": true,
                    "status": false,
                    "tags": [
                      "GOOGLECALENDAR_UPDATE_EVENT"
                    ]
                  },
                  {
                    "args": {
                      "calendar_expansion_max": {
                        "default": 50,
                        "description": "Maximum calendars for which FreeBusy information is provided. Max allowed: 50. Please provide a value of type integer.",
                        "examples": [],
                        "title": "Calendar Expansion Max",
                        "type": "integer"
                      },
                      "group_expansion_max": {
                        "default": 100,
                        "description": "Maximum calendar identifiers to return for a single group; exceeding this causes an error. Max allowed: 100. Please provide a value of type integer.",
                        "examples": [],
                        "title": "Group Expansion Max",
                        "type": "integer"
                      },
                      "items": {
                        "default": [
                          "primary"
                        ],
                        "description": "List of calendar identifiers (primary ID 'primary', user/calendar email, or unique calendar ID) to query for free/busy information.",
                        "examples": [
                          "primary",
                          "user@example.com",
                          "unique_calendar_id@group.calendar.google.com"
                        ],
                        "items": {
                          "type": "string"
                        },
                        "title": "Items",
                        "type": "array"
                      },
                      "time_max": {
                        "default": null,
                        "description": "End datetime for the query interval. Accepts ISO, comma-separated, or simple datetime formats. Please provide a value of type string.",
                        "examples": [
                          "2024-12-06T18:00:00Z",
                          "2024,12,06,18,00,00",
                          "2024-12-06 18:00:00"
                        ],
                        "title": "Time Max",
                        "type": "string"
                      },
                      "time_min": {
                        "default": null,
                        "description": "Start datetime for the query interval. Accepts ISO, comma-separated, or simple datetime formats. Please provide a value of type string.",
                        "examples": [
                          "2024-12-06T13:00:00Z",
                          "2024,12,06,13,00,00",
                          "2024-12-06 13:00:00"
                        ],
                        "title": "Time Min",
                        "type": "string"
                      },
                      "timezone": {
                        "default": "UTC",
                        "description": "IANA timezone identifier (e.g., 'America/New_York', 'Europe/London') for interpreting `time_min` and `time_max` if they lack timezone info, and for expanding recurring events. Please provide a value of type string.",
                        "examples": [
                          "UTC",
                          "America/New_York",
                          "Europe/Berlin"
                        ],
                        "title": "Timezone",
                        "type": "string"
                      }
                    },
                    "description": "Finds free/busy time slots in google calendars for specified calendars within a defined time range (defaults to the current day utc if `time min`/`time max` are omitted), enhancing busy intervals with event details; `time min` must precede `time max` if both are provided.",
                    "display_description": "Finds free/busy time slots in google calendars for specified calendars within a defined time range (defaults to the current day utc if `time min`/`time max` are omitted), enhancing busy intervals with event details; `time min` must precede `time max` if both are provided.",
                    "display_name": "Find Free Slots",
                    "name": "googlecalendar_find_free_slots",
                    "readonly": true,
                    "status": true,
                    "tags": [
                      "GOOGLECALENDAR_FIND_FREE_SLOTS"
                    ]
                  },
                  {
                    "args": {
                      "timezone": {
                        "default": 0,
                        "description": "Timezone offset from UTC in hours (e.g., 6 for UTC+6, -9 for UTC-9, 5.5 for UTC+5:30). Default 0 is UTC. Please provide a value of type number.",
                        "examples": [
                          "6",
                          "-9",
                          "0",
                          "5.5"
                        ],
                        "title": "Timezone",
                        "type": "number"
                      }
                    },
                    "description": "Gets the current date and time, allowing for a specific timezone offset.",
                    "display_description": "Gets the current date and time, allowing for a specific timezone offset.",
                    "display_name": "Get Current Date And Time",
                    "name": "googlecalendar_get_current_date_time",
                    "readonly": true,
                    "status": true,
                    "tags": [
                      "GOOGLECALENDAR_GET_CURRENT_DATE_TIME"
                    ]
                  },
                  {
                    "args": {
                      "max_results": {
                        "default": 10,
                        "description": "Maximum number of calendars to return per page. Max 250. Please provide a value of type integer.",
                        "examples": [
                          25,
                          100
                        ],
                        "title": "Max Results",
                        "type": "integer"
                      },
                      "min_access_role": {
                        "default": null,
                        "description": "Minimum access role for calendars returned. Valid values: 'freeBusyReader', 'owner', 'reader', 'writer'. Please provide a value of type string.",
                        "examples": [
                          "reader",
                          "owner"
                        ],
                        "title": "Min Access Role",
                        "type": "string"
                      },
                      "page_token": {
                        "default": null,
                        "description": "Token for the page of results to return, from a previous response. Please provide a value of type string.",
                        "examples": [
                          " nextPageToken123"
                        ],
                        "title": "Page Token",
                        "type": "string"
                      },
                      "show_deleted": {
                        "default": false,
                        "description": "Include deleted calendars in the result. Please provide a value of type boolean.",
                        "examples": [
                          true,
                          false
                        ],
                        "title": "Show Deleted",
                        "type": "boolean"
                      },
                      "show_hidden": {
                        "default": false,
                        "description": "Include calendars not typically shown in the UI. Please provide a value of type boolean.",
                        "examples": [
                          true,
                          false
                        ],
                        "title": "Show Hidden",
                        "type": "boolean"
                      },
                      "sync_token": {
                        "default": null,
                        "description": "Sync token from a previous list request to get only changed entries; showDeleted, showHidden, and pageToken are ignored if provided. Please provide a value of type string.",
                        "examples": [
                          "syncToken123"
                        ],
                        "title": "Sync Token",
                        "type": "string"
                      }
                    },
                    "description": "Retrieves calendars from the user's google calendar list, with options for pagination and filtering.",
                    "display_description": "Retrieves calendars from the user's google calendar list, with options for pagination and filtering.",
                    "display_name": "List Google Calendars",
                    "name": "googlecalendar_list_calendars",
                    "readonly": true,
                    "status": false,
                    "tags": [
                      "GOOGLECALENDAR_LIST_CALENDARS"
                    ]
                  },
                  {
                    "args": {
                      "attendee_email": {
                        "description": "Email address of the attendee to remove; if the email does not match an existing attendee, the event remains unchanged. Please provide a value of type string. This parameter is required.",
                        "examples": [
                          "john@gmail.com"
                        ],
                        "title": "Attendee Email",
                        "type": "string"
                      },
                      "calendar_id": {
                        "default": "primary",
                        "description": "Identifier of the Google Calendar to which the event belongs; 'primary' signifies the user's main calendar. Please provide a value of type string.",
                        "examples": [],
                        "title": "Calendar Id",
                        "type": "string"
                      },
                      "event_id": {
                        "description": "Unique identifier of the event. Please provide a value of type string. This parameter is required.",
                        "examples": [],
                        "title": "Event Id",
                        "type": "string"
                      }
                    },
                    "description": "Removes an attendee from a specified event in a google calendar; the calendar and event must exist.",
                    "display_description": "Removes an attendee from a specified event in a google calendar; the calendar and event must exist.",
                    "display_name": "Remove Attendee From Event",
                    "name": "googlecalendar_remove_attendee",
                    "readonly": true,
                    "status": false,
                    "tags": [
                      "GOOGLECALENDAR_REMOVE_ATTENDEE"
                    ]
                  }
                ]
              }
            },
            "tool_mode": true
          },
          "showNode": true,
          "type": "ComposioGoogleCalendarAPIComponent"
        },
        "dragging": false,
        "id": "ComposioGoogleCalendarAPIComponent-Ag3Si",
        "measured": {
          "height": 367,
          "width": 320
        },
        "position": {
          "x": 1334.9261807868395,
          "y": 1613.9769723636848
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "MCPTools-gXjNm",
          "node": {
            "base_classes": [
              "DataFrame"
            ],
            "beta": false,
            "category": "agents",
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Connect to an MCP server to use its tools.",
            "display_name": "MCP Tools",
            "documentation": "https://docs.langflow.org/mcp-client",
            "edited": false,
            "field_order": [
              "mcp_server",
              "tool",
              "tool_placeholder"
            ],
            "frozen": false,
            "icon": "Mcp",
            "key": "MCPTools",
            "last_updated": "2025-07-22T06:20:44.494Z",
            "legacy": false,
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Response",
                "group_outputs": false,
                "method": "build_output",
                "name": "response",
                "options": null,
                "required_inputs": null,
                "selected": "DataFrame",
                "tool_mode": true,
                "types": [
                  "DataFrame"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "score": 0.003932426697386162,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from __future__ import annotations\n\nimport asyncio\nimport uuid\nfrom typing import Any\n\nfrom langchain_core.tools import StructuredTool  # noqa: TC002\n\nfrom langflow.api.v2.mcp import get_server\nfrom langflow.base.agents.utils import maybe_unflatten_dict, safe_cache_get, safe_cache_set\nfrom langflow.base.mcp.util import (\n    MCPSseClient,\n    MCPStdioClient,\n    create_input_schema_from_json_schema,\n    update_tools,\n)\nfrom langflow.custom.custom_component.component_with_cache import ComponentWithCache\nfrom langflow.inputs.inputs import InputTypes  # noqa: TC001\nfrom langflow.io import DropdownInput, McpInput, MessageTextInput, Output\nfrom langflow.io.schema import flatten_schema, schema_to_langflow_inputs\nfrom langflow.logging import logger\nfrom langflow.schema.dataframe import DataFrame\nfrom langflow.schema.message import Message\nfrom langflow.services.auth.utils import create_user_longterm_token\n\n# Import get_server from the backend API\nfrom langflow.services.database.models.user.crud import get_user_by_id\nfrom langflow.services.deps import get_session, get_settings_service, get_storage_service\n\n\nclass MCPToolsComponent(ComponentWithCache):\n    schema_inputs: list = []\n    tools: list[StructuredTool] = []\n    _not_load_actions: bool = False\n    _tool_cache: dict = {}\n    _last_selected_server: str | None = None  # Cache for the last selected server\n\n    def __init__(self, **data) -> None:\n        super().__init__(**data)\n        # Initialize cache keys to avoid CacheMiss when accessing them\n        self._ensure_cache_structure()\n\n        # Initialize clients with access to the component cache\n        self.stdio_client: MCPStdioClient = MCPStdioClient(component_cache=self._shared_component_cache)\n        self.sse_client: MCPSseClient = MCPSseClient(component_cache=self._shared_component_cache)\n\n    def _ensure_cache_structure(self):\n        \"\"\"Ensure the cache has the required structure.\"\"\"\n        # Check if servers key exists and is not CacheMiss\n        servers_value = safe_cache_get(self._shared_component_cache, \"servers\")\n        if servers_value is None:\n            safe_cache_set(self._shared_component_cache, \"servers\", {})\n\n        # Check if last_selected_server key exists and is not CacheMiss\n        last_server_value = safe_cache_get(self._shared_component_cache, \"last_selected_server\")\n        if last_server_value is None:\n            safe_cache_set(self._shared_component_cache, \"last_selected_server\", \"\")\n\n    default_keys: list[str] = [\n        \"code\",\n        \"_type\",\n        \"tool_mode\",\n        \"tool_placeholder\",\n        \"mcp_server\",\n        \"tool\",\n    ]\n\n    display_name = \"MCP Tools\"\n    description = \"Connect to an MCP server to use its tools.\"\n    documentation: str = \"https://docs.langflow.org/mcp-client\"\n    icon = \"Mcp\"\n    name = \"MCPTools\"\n\n    inputs = [\n        McpInput(\n            name=\"mcp_server\",\n            display_name=\"MCP Server\",\n            info=\"Select the MCP Server that will be used by this component\",\n            real_time_refresh=True,\n        ),\n        DropdownInput(\n            name=\"tool\",\n            display_name=\"Tool\",\n            options=[],\n            value=\"\",\n            info=\"Select the tool to execute\",\n            show=False,\n            required=True,\n            real_time_refresh=True,\n        ),\n        MessageTextInput(\n            name=\"tool_placeholder\",\n            display_name=\"Tool Placeholder\",\n            info=\"Placeholder for the tool\",\n            value=\"\",\n            show=False,\n            tool_mode=False,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Response\", name=\"response\", method=\"build_output\"),\n    ]\n\n    async def _validate_schema_inputs(self, tool_obj) -> list[InputTypes]:\n        \"\"\"Validate and process schema inputs for a tool.\"\"\"\n        try:\n            if not tool_obj or not hasattr(tool_obj, \"args_schema\"):\n                msg = \"Invalid tool object or missing input schema\"\n                raise ValueError(msg)\n\n            flat_schema = flatten_schema(tool_obj.args_schema.schema())\n            input_schema = create_input_schema_from_json_schema(flat_schema)\n            if not input_schema:\n                msg = f\"Empty input schema for tool '{tool_obj.name}'\"\n                raise ValueError(msg)\n\n            schema_inputs = schema_to_langflow_inputs(input_schema)\n            if not schema_inputs:\n                msg = f\"No input parameters defined for tool '{tool_obj.name}'\"\n                logger.warning(msg)\n                return []\n\n        except Exception as e:\n            msg = f\"Error validating schema inputs: {e!s}\"\n            logger.exception(msg)\n            raise ValueError(msg) from e\n        else:\n            return schema_inputs\n\n    async def update_tool_list(self, mcp_server_value=None):\n        # Accepts mcp_server_value as dict {name, config} or uses self.mcp_server\n        mcp_server = mcp_server_value if mcp_server_value is not None else getattr(self, \"mcp_server\", None)\n        server_name = None\n        server_config_from_value = None\n        if isinstance(mcp_server, dict):\n            server_name = mcp_server.get(\"name\")\n            server_config_from_value = mcp_server.get(\"config\")\n        else:\n            server_name = mcp_server\n        if not server_name:\n            self.tools = []\n            return [], {\"name\": server_name, \"config\": server_config_from_value}\n\n        # Use shared cache if available\n        servers_cache = safe_cache_get(self._shared_component_cache, \"servers\", {})\n        cached = servers_cache.get(server_name) if isinstance(servers_cache, dict) else None\n\n        if cached is not None:\n            self.tools = cached[\"tools\"]\n            self.tool_names = cached[\"tool_names\"]\n            self._tool_cache = cached[\"tool_cache\"]\n            server_config_from_value = cached[\"config\"]\n            return self.tools, {\"name\": server_name, \"config\": server_config_from_value}\n\n        try:\n            async for db in get_session():\n                user_id, _ = await create_user_longterm_token(db)\n                current_user = await get_user_by_id(db, user_id)\n\n                # Try to get server config from DB/API\n                server_config = await get_server(\n                    server_name,\n                    current_user,\n                    db,\n                    storage_service=get_storage_service(),\n                    settings_service=get_settings_service(),\n                )\n\n                # If get_server returns empty but we have a config, use it\n                if not server_config and server_config_from_value:\n                    server_config = server_config_from_value\n\n                if not server_config:\n                    self.tools = []\n                    return [], {\"name\": server_name, \"config\": server_config}\n\n                _, tool_list, tool_cache = await update_tools(\n                    server_name=server_name,\n                    server_config=server_config,\n                    mcp_stdio_client=self.stdio_client,\n                    mcp_sse_client=self.sse_client,\n                )\n\n                self.tool_names = [tool.name for tool in tool_list if hasattr(tool, \"name\")]\n                self._tool_cache = tool_cache\n                self.tools = tool_list\n                # Cache the result using shared cache\n                cache_data = {\n                    \"tools\": tool_list,\n                    \"tool_names\": self.tool_names,\n                    \"tool_cache\": tool_cache,\n                    \"config\": server_config,\n                }\n\n                # Safely update the servers cache\n                current_servers_cache = safe_cache_get(self._shared_component_cache, \"servers\", {})\n                if isinstance(current_servers_cache, dict):\n                    current_servers_cache[server_name] = cache_data\n                    safe_cache_set(self._shared_component_cache, \"servers\", current_servers_cache)\n\n                return tool_list, {\"name\": server_name, \"config\": server_config}\n        except (TimeoutError, asyncio.TimeoutError) as e:\n            msg = f\"Timeout updating tool list: {e!s}\"\n            logger.exception(msg)\n            raise TimeoutError(msg) from e\n        except Exception as e:\n            msg = f\"Error updating tool list: {e!s}\"\n            logger.exception(msg)\n            raise ValueError(msg) from e\n\n    async def update_build_config(self, build_config: dict, field_value: str, field_name: str | None = None) -> dict:\n        \"\"\"Toggle the visibility of connection-specific fields based on the selected mode.\"\"\"\n        try:\n            if field_name == \"tool\":\n                try:\n                    if len(self.tools) == 0:\n                        try:\n                            self.tools, build_config[\"mcp_server\"][\"value\"] = await self.update_tool_list()\n                            build_config[\"tool\"][\"options\"] = [tool.name for tool in self.tools]\n                            build_config[\"tool\"][\"placeholder\"] = \"Select a tool\"\n                        except (TimeoutError, asyncio.TimeoutError) as e:\n                            msg = f\"Timeout updating tool list: {e!s}\"\n                            logger.exception(msg)\n                            if not build_config[\"tools_metadata\"][\"show\"]:\n                                build_config[\"tool\"][\"show\"] = True\n                                build_config[\"tool\"][\"options\"] = []\n                                build_config[\"tool\"][\"value\"] = \"\"\n                                build_config[\"tool\"][\"placeholder\"] = \"Timeout on MCP server\"\n                            else:\n                                build_config[\"tool\"][\"show\"] = False\n                        except ValueError:\n                            if not build_config[\"tools_metadata\"][\"show\"]:\n                                build_config[\"tool\"][\"show\"] = True\n                                build_config[\"tool\"][\"options\"] = []\n                                build_config[\"tool\"][\"value\"] = \"\"\n                                build_config[\"tool\"][\"placeholder\"] = \"Error on MCP Server\"\n                            else:\n                                build_config[\"tool\"][\"show\"] = False\n\n                    if field_value == \"\":\n                        return build_config\n                    tool_obj = None\n                    for tool in self.tools:\n                        if tool.name == field_value:\n                            tool_obj = tool\n                            break\n                    if tool_obj is None:\n                        msg = f\"Tool {field_value} not found in available tools: {self.tools}\"\n                        logger.warning(msg)\n                        return build_config\n                    await self._update_tool_config(build_config, field_value)\n                except Exception as e:\n                    build_config[\"tool\"][\"options\"] = []\n                    msg = f\"Failed to update tools: {e!s}\"\n                    raise ValueError(msg) from e\n                else:\n                    return build_config\n            elif field_name == \"mcp_server\":\n                if not field_value:\n                    build_config[\"tool\"][\"show\"] = False\n                    build_config[\"tool\"][\"options\"] = []\n                    build_config[\"tool\"][\"value\"] = \"\"\n                    build_config[\"tool\"][\"placeholder\"] = \"\"\n                    build_config[\"tool_placeholder\"][\"tool_mode\"] = False\n                    self.remove_non_default_keys(build_config)\n                    return build_config\n\n                build_config[\"tool_placeholder\"][\"tool_mode\"] = True\n\n                current_server_name = field_value.get(\"name\") if isinstance(field_value, dict) else field_value\n                _last_selected_server = safe_cache_get(self._shared_component_cache, \"last_selected_server\", \"\")\n\n                # To avoid unnecessary updates, only proceed if the server has actually changed\n                if (_last_selected_server in (current_server_name, \"\")) and build_config[\"tool\"][\"show\"]:\n                    return build_config\n\n                # Determine if \"Tool Mode\" is active by checking if the tool dropdown is hidden.\n                is_in_tool_mode = build_config[\"tools_metadata\"][\"show\"]\n                safe_cache_set(self._shared_component_cache, \"last_selected_server\", current_server_name)\n\n                # Check if tools are already cached for this server before clearing\n                cached_tools = None\n                if current_server_name:\n                    servers_cache = safe_cache_get(self._shared_component_cache, \"servers\", {})\n                    if isinstance(servers_cache, dict):\n                        cached = servers_cache.get(current_server_name)\n                        if cached is not None:\n                            cached_tools = cached[\"tools\"]\n                            self.tools = cached_tools\n                            self.tool_names = cached[\"tool_names\"]\n                            self._tool_cache = cached[\"tool_cache\"]\n\n                # Only clear tools if we don't have cached tools for the current server\n                if not cached_tools:\n                    self.tools = []  # Clear previous tools only if no cache\n\n                self.remove_non_default_keys(build_config)  # Clear previous tool inputs\n\n                # Only show the tool dropdown if not in tool_mode\n                if not is_in_tool_mode:\n                    build_config[\"tool\"][\"show\"] = True\n                    if cached_tools:\n                        # Use cached tools to populate options immediately\n                        build_config[\"tool\"][\"options\"] = [tool.name for tool in cached_tools]\n                        build_config[\"tool\"][\"placeholder\"] = \"Select a tool\"\n                    else:\n                        # Show loading state only when we need to fetch tools\n                        build_config[\"tool\"][\"placeholder\"] = \"Loading tools...\"\n                        build_config[\"tool\"][\"options\"] = []\n                    build_config[\"tool\"][\"value\"] = uuid.uuid4()\n                else:\n                    # Keep the tool dropdown hidden if in tool_mode\n                    self._not_load_actions = True\n                    build_config[\"tool\"][\"show\"] = False\n\n            elif field_name == \"tool_mode\":\n                build_config[\"tool\"][\"placeholder\"] = \"\"\n                build_config[\"tool\"][\"show\"] = not bool(field_value) and bool(build_config[\"mcp_server\"])\n                self.remove_non_default_keys(build_config)\n                self.tool = build_config[\"tool\"][\"value\"]\n                if field_value:\n                    self._not_load_actions = True\n                else:\n                    build_config[\"tool\"][\"value\"] = uuid.uuid4()\n                    build_config[\"tool\"][\"options\"] = []\n                    build_config[\"tool\"][\"show\"] = True\n                    build_config[\"tool\"][\"placeholder\"] = \"Loading tools...\"\n            elif field_name == \"tools_metadata\":\n                self._not_load_actions = False\n\n        except Exception as e:\n            msg = f\"Error in update_build_config: {e!s}\"\n            logger.exception(msg)\n            raise ValueError(msg) from e\n        else:\n            return build_config\n\n    def get_inputs_for_all_tools(self, tools: list) -> dict:\n        \"\"\"Get input schemas for all tools.\"\"\"\n        inputs = {}\n        for tool in tools:\n            if not tool or not hasattr(tool, \"name\"):\n                continue\n            try:\n                flat_schema = flatten_schema(tool.args_schema.schema())\n                input_schema = create_input_schema_from_json_schema(flat_schema)\n                langflow_inputs = schema_to_langflow_inputs(input_schema)\n                inputs[tool.name] = langflow_inputs\n            except (AttributeError, ValueError, TypeError, KeyError) as e:\n                msg = f\"Error getting inputs for tool {getattr(tool, 'name', 'unknown')}: {e!s}\"\n                logger.exception(msg)\n                continue\n        return inputs\n\n    def remove_input_schema_from_build_config(\n        self, build_config: dict, tool_name: str, input_schema: dict[list[InputTypes], Any]\n    ):\n        \"\"\"Remove the input schema for the tool from the build config.\"\"\"\n        # Keep only schemas that don't belong to the current tool\n        input_schema = {k: v for k, v in input_schema.items() if k != tool_name}\n        # Remove all inputs from other tools\n        for value in input_schema.values():\n            for _input in value:\n                if _input.name in build_config:\n                    build_config.pop(_input.name)\n\n    def remove_non_default_keys(self, build_config: dict) -> None:\n        \"\"\"Remove non-default keys from the build config.\"\"\"\n        for key in list(build_config.keys()):\n            if key not in self.default_keys:\n                build_config.pop(key)\n\n    async def _update_tool_config(self, build_config: dict, tool_name: str) -> None:\n        \"\"\"Update tool configuration with proper error handling.\"\"\"\n        if not self.tools:\n            self.tools, build_config[\"mcp_server\"][\"value\"] = await self.update_tool_list()\n\n        if not tool_name:\n            return\n\n        tool_obj = next((tool for tool in self.tools if tool.name == tool_name), None)\n        if not tool_obj:\n            msg = f\"Tool {tool_name} not found in available tools: {self.tools}\"\n            self.remove_non_default_keys(build_config)\n            build_config[\"tool\"][\"value\"] = \"\"\n            logger.warning(msg)\n            return\n\n        try:\n            # Store current values before removing inputs\n            current_values = {}\n            for key, value in build_config.items():\n                if key not in self.default_keys and isinstance(value, dict) and \"value\" in value:\n                    current_values[key] = value[\"value\"]\n\n            # Get all tool inputs and remove old ones\n            input_schema_for_all_tools = self.get_inputs_for_all_tools(self.tools)\n            self.remove_input_schema_from_build_config(build_config, tool_name, input_schema_for_all_tools)\n\n            # Get and validate new inputs\n            self.schema_inputs = await self._validate_schema_inputs(tool_obj)\n            if not self.schema_inputs:\n                msg = f\"No input parameters to configure for tool '{tool_name}'\"\n                logger.info(msg)\n                return\n\n            # Add new inputs to build config\n            for schema_input in self.schema_inputs:\n                if not schema_input or not hasattr(schema_input, \"name\"):\n                    msg = \"Invalid schema input detected, skipping\"\n                    logger.warning(msg)\n                    continue\n\n                try:\n                    name = schema_input.name\n                    input_dict = schema_input.to_dict()\n                    input_dict.setdefault(\"value\", None)\n                    input_dict.setdefault(\"required\", True)\n\n                    build_config[name] = input_dict\n\n                    # Preserve existing value if the parameter name exists in current_values\n                    if name in current_values:\n                        build_config[name][\"value\"] = current_values[name]\n\n                except (AttributeError, KeyError, TypeError) as e:\n                    msg = f\"Error processing schema input {schema_input}: {e!s}\"\n                    logger.exception(msg)\n                    continue\n        except ValueError as e:\n            msg = f\"Schema validation error for tool {tool_name}: {e!s}\"\n            logger.exception(msg)\n            self.schema_inputs = []\n            return\n        except (AttributeError, KeyError, TypeError) as e:\n            msg = f\"Error updating tool config: {e!s}\"\n            logger.exception(msg)\n            raise ValueError(msg) from e\n\n    async def build_output(self) -> DataFrame:\n        \"\"\"Build output with improved error handling and validation.\"\"\"\n        try:\n            self.tools, _ = await self.update_tool_list()\n            if self.tool != \"\":\n                # Set session context for persistent MCP sessions using Langflow session ID\n                session_context = self._get_session_context()\n                if session_context:\n                    self.stdio_client.set_session_context(session_context)\n                    self.sse_client.set_session_context(session_context)\n\n                exec_tool = self._tool_cache[self.tool]\n                tool_args = self.get_inputs_for_all_tools(self.tools)[self.tool]\n                kwargs = {}\n                for arg in tool_args:\n                    value = getattr(self, arg.name, None)\n                    if value:\n                        if isinstance(value, Message):\n                            kwargs[arg.name] = value.text\n                        else:\n                            kwargs[arg.name] = value\n\n                unflattened_kwargs = maybe_unflatten_dict(kwargs)\n\n                output = await exec_tool.coroutine(**unflattened_kwargs)\n\n                tool_content = []\n                for item in output.content:\n                    item_dict = item.model_dump()\n                    tool_content.append(item_dict)\n                return DataFrame(data=tool_content)\n            return DataFrame(data=[{\"error\": \"You must select a tool\"}])\n        except Exception as e:\n            msg = f\"Error in build_output: {e!s}\"\n            logger.exception(msg)\n            raise ValueError(msg) from e\n\n    def _get_session_context(self) -> str | None:\n        \"\"\"Get the Langflow session ID for MCP session caching.\"\"\"\n        # Try to get session ID from the component's execution context\n        if hasattr(self, \"graph\") and hasattr(self.graph, \"session_id\"):\n            session_id = self.graph.session_id\n            # Include server name to ensure different servers get different sessions\n            server_name = \"\"\n            mcp_server = getattr(self, \"mcp_server\", None)\n            if isinstance(mcp_server, dict):\n                server_name = mcp_server.get(\"name\", \"\")\n            elif mcp_server:\n                server_name = str(mcp_server)\n            return f\"{session_id}_{server_name}\" if session_id else None\n        return None\n\n    async def _get_tools(self):\n        \"\"\"Get cached tools or update if necessary.\"\"\"\n        mcp_server = getattr(self, \"mcp_server\", None)\n        if not self._not_load_actions:\n            tools, _ = await self.update_tool_list(mcp_server)\n            return tools\n        return []\n"
              },
              "mcp_server": {
                "_input_type": "McpInput",
                "advanced": false,
                "display_name": "MCP Server",
                "dynamic": false,
                "info": "Select the MCP Server that will be used by this component",
                "name": "mcp_server",
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "mcp",
                "value": {}
              },
              "tool": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Tool",
                "dynamic": false,
                "info": "Select the tool to execute",
                "name": "tool",
                "options": [],
                "options_metadata": [],
                "placeholder": "",
                "real_time_refresh": true,
                "required": true,
                "show": false,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "tool_placeholder": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Tool Placeholder",
                "dynamic": false,
                "info": "Placeholder for the tool",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "tool_placeholder",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "MCPTools"
        },
        "id": "MCPTools-gXjNm",
        "measured": {
          "height": 201,
          "width": 320
        },
        "position": {
          "x": 1980.918697655348,
          "y": 1714.899937997834
        },
        "selected": true,
        "type": "genericNode"
      }
    ],
    "viewport": {
      "x": -1162.5676523595353,
      "y": -1025.804650181638,
      "zoom": 0.9952794401371036
    }
  },
  "description": "A simple but powerful starter agent.",
  "endpoint_name": null,
  "id": "59474ebb-b41e-442e-ba56-d8eacfcb054c",
  "is_component": false,
  "last_tested_version": "1.5.0.post1",
  "name": "Simple Agent",
  "tags": [
    "assistants",
    "agents"
  ]
}