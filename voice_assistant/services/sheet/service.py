#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ –≤ Google Sheets –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º:
- –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ google.oauth2.credentials.Credentials
- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
- –ü–æ–∏—Å–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–π –Ω–µ–ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ —Ä–∞–º–∫–∞—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
- –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
"""

import argparse
import asyncio
from datetime import datetime

from google.oauth2.credentials import Credentials
from googleapiclient.discovery import build
from loguru import logger

from voice_assistant.app_utils.app_types import UserId
from voice_assistant.database.core import engine
from voice_assistant.services.calendar.calendar_data import CalendarDataService
from voice_assistant.services.calendar.creds import get_calendar_credentials
from voice_assistant.services.google_settings import calendar_settings


def col_idx_to_letter(idx: int) -> str:
    """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –∏–Ω–¥–µ–∫—Å —Å—Ç–æ–ª–±—Ü–∞ (1-based) –≤ –±—É–∫–≤—É, –Ω–∞–ø—Ä–∏–º–µ—Ä 1->A, 27->AA"""
    result = ""
    while idx > 0:
        idx, rem = divmod(idx - 1, 26)
        result = chr(65 + rem) + result
    return result


def calc_total(reps: list[int], bonus: int) -> int:
    """–°—É–º–º–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –ø–ª—é—Å –±–æ–Ω—É—Å"""
    return sum(r for r in reps if r) + bonus


class WorkoutSheetAppender:
    def __init__(
        self,
        creds: Credentials,
        spreadsheet_id: str,
        sheet_name: str,
        exercise_name: str,
    ):
        self.service = build("sheets", "v4", credentials=creds)
        self.spreadsheet_id = spreadsheet_id
        self.sheet_name = sheet_name
        self.exercise_name = exercise_name

    def _get_header_row(self) -> list[str]:
        range_ = f"{self.sheet_name}!1:1"
        result = self.service.spreadsheets().values().get(spreadsheetId=self.spreadsheet_id, range=range_).execute()
        return result.get("values", [[]])[0]

    def _find_exercise_range(self) -> tuple[int, int]:
        header = self._get_header_row()
        # –Ω–∞–π—Ç–∏ –∏–Ω–¥–µ–∫—Å –Ω–∞—á–∞–ª–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
        try:
            start_idx = header.index(self.exercise_name) + 1  # 1-based
        except ValueError as e:
            raise e from ValueError(f"–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ '{self.exercise_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ")
        # –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–Ω–µ—Ü –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –Ω–µ–ø—É—Å—Ç–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        end_idx = start_idx
        for i in range(start_idx, len(header)):
            if header[i] != "":
                break
            end_idx += 1
        return start_idx, end_idx

    def _find_next_row(self, start_col: int, end_col: int) -> int:
        start_letter = col_idx_to_letter(start_col)
        end_letter = col_idx_to_letter(end_col)
        range_ = f"{self.sheet_name}!{start_letter}2:{end_letter}"
        result = self.service.spreadsheets().values().get(spreadsheetId=self.spreadsheet_id, range=range_).execute()
        rows = result.get("values", [])
        # –∏—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏ –≤ –ª—é–±–æ–º —Å—Ç–æ–ª–±—Ü–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        # for idx in range(len(rows) - 1, -1, -1):
        #     if any(cell != "" for cell in rows[idx]):
        #         return idx + 2 + 1
        return len(rows) + 2 + 1  # +2 —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –æ—Ç 0-based –∫ —Ä–µ–∞–ª—å–Ω–æ–º—É –Ω–æ–º–µ—Ä—É —Ä—è–¥–∞ –ø–ª—é—Å –æ–¥–Ω–∞ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞

    def append_workout(self, date: str, reps: list[int], bonus: int, total: int | None = None) -> None:
        if total is None:
            total = calc_total(reps, bonus)
        start_col, end_col = self._find_exercise_range()
        row_idx = self._find_next_row(start_col, end_col)
        # –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–Ω—É—é —Å—Ç—Ä–æ–∫—É: –¥–∞—Ç–∞ + 6 —Å–µ—Ç–æ–≤ + üî• + –¥–æ–±–∞–≤–∫–∞ + —Å—É–º–º–∞
        fire = "üî•"
        cells = [date] + [str(r) if r is not None else "" for r in reps] + [fire, str(bonus), str(total)]
        range_ = f"{self.sheet_name}!A{row_idx}"
        body = {"values": [cells]}
        logger.info(f"–î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ {range_}: {cells}")
        self.service.spreadsheets().values().append(
            spreadsheetId=self.spreadsheet_id,
            range=range_,
            valueInputOption="USER_ENTERED",
            insertDataOption="INSERT_ROWS",
            body=body,
        ).execute()
        logger.success(f"–ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å—Ç—Ä–æ–∫—É {row_idx}")


async def main() -> None:
    parser = argparse.ArgumentParser(description="–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ –≤ Google Sheets")
    parser.add_argument("--spreadsheet-id", required=True)
    parser.add_argument("--sheet-name", required=True)
    parser.add_argument("--exercise-name", required=True)
    parser.add_argument("--reps", nargs="*", type=int, help="–ü–æ–≤—Ç–æ—Ä—ã –¥–ª—è —Å–µ—Ç–æ–≤ (–æ—Ç 1 –¥–æ 6)", default=[])
    parser.add_argument("--bonus", type=int, help="–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–±–∞–≤–∫–∏", default=0)
    parser.add_argument(
        "--date",
        help="–î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY",
        default=datetime.now(tz=calendar_settings.calendar_tz).strftime("%d.%m.%Y"),
    )
    parser.add_argument("--total", type=int, help="–í—Å–µ–≥–æ (—Å—É–º–º–∞), –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞, –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
    args = parser.parse_args()

    calendar_data_service = CalendarDataService(engine, UserId("default"))
    creds = await get_calendar_credentials(calendar_data_service, refresh=False)

    # # –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
    # creds_file = os.getenv("GOOGLE_TOKEN_FILE", "token.json")
    # creds = Credentials.from_authorized_user_file(creds_file)

    appender = WorkoutSheetAppender(creds, args.spreadsheet_id, args.sheet_name, args.exercise_name)
    appender.append_workout(args.date, args.reps + [None] * (6 - len(args.reps)), args.bonus, args.total)


if __name__ == "__main__":
    asyncio.run(main())
